<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Code and Kaizen]]></title>
  <link href="http://codeandkaizen.herokuapp.com/atom.xml" rel="self"/>
  <link href="http://codeandkaizen.herokuapp.com/"/>
  <updated>2013-12-27T15:31:25+00:00</updated>
  <id>http://codeandkaizen.herokuapp.com/</id>
  <author>
    <name><![CDATA[Rafael Huaman]]></name>
    <email><![CDATA[info@codeandkaizen.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hartl's Rails Tutorial - I'm Done!]]></title>
    <link href="http://codeandkaizen.herokuapp.com/blog/2013/12/24/hartls-rails-tutorial-im-done/"/>
    <updated>2013-12-24T06:02:00+00:00</updated>
    <id>http://codeandkaizen.herokuapp.com/blog/2013/12/24/hartls-rails-tutorial-im-done</id>
    <content type="html"><![CDATA[<p>So after a few months of coding on the weekend and late at night, I am finally done with the Hartl Rails tutorial. It was a great experience and I feel great about doing pretty much everything on the book. There was a lot to cover and I am not going to review it (there are plenty of reviews out there), but I am going to write about my biggest takeaways.</p>

<h2>The Ruby Koans</h2>

<p>This little jewel was hidden in the exercise section of chapter 4. This resource was excellent and should have been more prominent. Someone who skipped the ruby section exercises could miss this great resource.</p>

<h2>Rails covers everything</h2>

<p>Rails makes it possible for one person to do lots very fast. It is great, but sometimes it feels like &ldquo;magic&rdquo;. In order to really understand the magic you have to really understand rails (this is hard, there is a lot there).</p>

<h2>ActiveRecord is important</h2>

<p>ActiveRecord is the heart and soul of Rails. Understanding Object-Relational Mapping goes a long way.</p>

<h2>Gems can be addictive</h2>

<p>Gems are a great part of the Ruby community; however, they should be used sparingly. Putting too many gems in an application is like filling a system with a lot of black boxes you have no control over.</p>

<h2>TDD for the win!</h2>

<p>I love that this tutorial emphasizes TDD. I love testing and this book rarely writes a feature without a test. I am currently working through the <a href="http://pragprog.com/book/rails4/agile-web-development-with-rails-4">Agile Development with Rails 4</a> book and I do not like how little testing there is in that book. Hartl really knocks it out of the park here.</p>

<p>Those are my thoughts for now. I may update this entry later. However, I don&rsquo;t want to spend too much time on this. I have moved on to a different book: <a href="http://pragprog.com/book/rails4/agile-web-development-with-rails-4">Agile Development with Rails 4</a>. This is helping me internalize many of the concepts and see different ways to work with Rails. I feel that once I am done with this book I will have the Rails expertise to start playing with a few personal projects I have in mind. These are exciting times.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nitrous.io and How I Stopped Carrying Two Laptops]]></title>
    <link href="http://codeandkaizen.herokuapp.com/blog/2013/12/12/nitrous-dot-io-and-how-i-stopped-carrying-two-laptops/"/>
    <updated>2013-12-12T05:54:00+00:00</updated>
    <id>http://codeandkaizen.herokuapp.com/blog/2013/12/12/nitrous-dot-io-and-how-i-stopped-carrying-two-laptops</id>
    <content type="html"><![CDATA[<p>This post is bittersweet.</p>

<p>Not too long ago I wrote about how <a href="http://codeandkaizen.herokuapp.com/blog/2013/10/06/my-ubuntu-laptop/">I breathed new life to my old college laptop</a> by turning it into my development/learning computer. When I was done, I was happy. I started using it all the time and even bringing with me when I traveled for work which meant carrying two laptops. I did not care though. My Ubuntu laptop was worth it!</p>

<p>This lasted about two months. A few weeks ago I attended a programming workshop at Full Stack Academy. We spent a few hours working through a few exercises in JavaScript and sharing our solutions. The workshop was good and the instructors were fun; however, they showed me one thing that changed my life. They introduced me to <a href="https://www.nitrous.io/">nitrous.io</a>. Nitrous.io is cloud based development environment with a web-based IDE and cloud VMs. What does this mean? You get a Linux box in your browser (Mind blown!). Maybe I am little late to the party but this literally changed my life. I do not carry two laptops when I travel for work anymore. I travel weekly so this is huge for me.</p>

<p>I recently transferred all my projects to nitrous.io (this blog too!) and life has been much easier that way (Sweet!).</p>

<p>My old laptop is still awesome but I don&rsquo;t use it that much and is back to collecting dust (Bitter!).</p>

<p>Anyway&hellip; cloud based IDEs are the <strong>future</strong>! In fact a quick google search just confirmed that you can use the <a href="http://www.raspberrypi.org/phpBB3/viewtopic.php?t=9984">Raspberry Pi</a> and <a href="https://c9.io/">Cloud9</a> &ndash; another popular web based IDE &ndash; to get a development environment for $35. This is extremely exciting.</p>

<p>That is all for now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Code Retreat]]></title>
    <link href="http://codeandkaizen.herokuapp.com/blog/2013/11/28/my-first-code-retreat/"/>
    <updated>2013-11-28T05:44:00+00:00</updated>
    <id>http://codeandkaizen.herokuapp.com/blog/2013/11/28/my-first-code-retreat</id>
    <content type="html"><![CDATA[<p>This is a post about my <a href="http://coderetreat.org/">code retreat</a> experience a few months ago. For those who don&rsquo;t know what a Code Retreat is please visit <a href="http://coderetreat.org/">coderetreat.org</a>.</p>

<p>This is not going be extensive. I don&rsquo;t want to go into the details and the specific exercises because that would be like spoilers. I am just going to focus on the new things I learned/tried that day and my overall conclusion.</p>

<h2>Pair Programming</h2>

<p>To those that have never tried it, a code retreat is a great way to pair program for the first time. The first time I paired was during a job interview. When I told some people this, I got some raised eyebrows and some &ldquo;Yikes! I bet that was intimidating&rdquo;. It didn&rsquo;t think so at the time but afterwards while analyzing my performance I concluded that my interactions were little awkward. I could have used some practice&hellip; well this retreat was just what I needed. In a single day I paired over and over again. I paired with both industry veterans and beginners and I learned a lot with each one. The best part is that everyone was always friendly and fun willing to teach and be open to criticism.</p>

<p>I even found myself in a situation where my partner was flying through code and he got stuck and couldn&rsquo;t find the problem. He didn&rsquo;t quite stop though and was flying through tests and switching screens between the Ruby documentation and our program. I had to found a way to put the brakes on his speed and slowly take a few steps back to where I thought the bug was. I was abrupt but polite, all the time hoping he wouldn&rsquo;t take it the wrong way. In the end he thanked me for it! It those little learning moments that make code retreats a valuable experience</p>

<h2>Retrospectives</h2>

<p>Actually looking back at what we did at every step of the way. This was neat; it really drove the point of Agile and refactoring home. We shouldn&rsquo;t just refactor code but also try to improve ourselves and our practices.</p>

<h2>VIM</h2>

<p>Most people at the retreat were fine with using Sublime and this was working fine until one of pairs said &ldquo;Have you ever used VIM? You will learn today.&rdquo; How can you say no to a free VIM lightning class? It was definitely a challenge at first but I got the basics down easy enough. I can see how with practice and a few neat features productivity can increase dramatically. I have not converted completely but ever since the retreat I have been practicing with vimtutor whenever I have a few free minutes. I will switch completely once I feel I am not super slow (especially now that I am using nitrous.io &mdash; more to come on this).</p>

<h2>Flexing coding muscles</h2>

<p>Those exercises really make you think. The exercises are designed to teach and they are good at that. Every exercise makes you think hard and a lot and in different ways too. Simple constraints like telling you not to use a particular statement can really help you explore the limits of a programming paradigm or the features of a particular programming language. By end of the day you will be tired and you will feel great!</p>

<h2>Programming Styles</h2>

<p>This comes with pairing. I had seen other people&rsquo;s code before at school, but they all had a style similar to mine. I guess this is expected since my classmates and I learned together.  But pairing with people who think differently is just eye-opening. Seeing different styles helped me learn new things about the Ruby programming language and showed me different ways to address problems. I had several &ldquo;wow&rdquo; moments when my partners suggested quick and simple solutions that I had not thought about before.</p>

<h2>Fun</h2>

<p>It was all fun. What can I say? I love coding and a full day of challenges with great people was excellent.</p>

<h1>Conclusion</h1>

<p>I recommend it to everybody. Programmers need practice too and retreats are an excellent way to do it and discover many things in the process.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Updating My Learing Plan]]></title>
    <link href="http://codeandkaizen.herokuapp.com/blog/2013/10/13/updating-my-learing-plan/"/>
    <updated>2013-10-13T15:05:00+00:00</updated>
    <id>http://codeandkaizen.herokuapp.com/blog/2013/10/13/updating-my-learing-plan</id>
    <content type="html"><![CDATA[<p>When I started this learning process, I had a goal in mind and built a plan to help me achieve it. A plan can help you think methodically about how to achieve your goal and keep track of your progress. The learning plan I designed was based on what I knew at the time. Since then I have reached many milestones and have learned a lot from others. It is time now to revisit this plan and see if it is still relevant.</p>

<h2>Step one: Check Progress</h2>

<ul>
<li>Basic programming concepts (Done &ndash; Head First Java for quick references)</li>
<li>The Ruby programming language

<ul>
<li>Basics syntax and concepts (Done &ndash; codecademy and Ruby Koans)</li>
</ul>
</li>
<li>Rails, the framework to develop web application with Ruby

<ul>
<li>Chapter 8 of Michael Hartl&rsquo;s tutorial</li>
</ul>
</li>
<li>Libraries / Ruby Gems

<ul>
<li>Revaluated</li>
</ul>
</li>
<li>Rspec, Test Driven Development (TDD) or Behavior Driven Development (BDD) methodologies

<ul>
<li>I participated in a code retreat and had the chance to try out testing and rspec through different exercises.</li>
</ul>
</li>
<li>HTML and CSS, I will try HAML and Sass

<ul>
<li>Finished foundational HTML and CSS. I have used Sass briefly through Hartl&rsquo;s tutorial</li>
<li>Have not tried HAML</li>
</ul>
</li>
<li>JavaScript and jQuery

<ul>
<li>Not addressed</li>
</ul>
</li>
<li>Database Concepts

<ul>
<li>Basics Covered</li>
</ul>
</li>
<li>Web basics &ndash; forms, HTTP request / response

<ul>
<li>Covered partially by Michael Hartl&rsquo;s tutorial</li>
</ul>
</li>
<li>UNIX command line and development environment (Done &ndash; currently working with Ubuntu)</li>
<li>Deployment and Server Management

<ul>
<li>Heroku (Done &ndash; I use Heroku to host this blog and I am using it in Michael Hartl&rsquo;s tutorial)</li>
</ul>
</li>
<li>Git and Github, Source code version control systems

<ul>
<li>Basics (Done &ndash; Michael Hartl&rsquo;s tutorial)</li>
<li>Creating a repository</li>
<li>Adding changes and committing them</li>
<li>Branching and simple merging</li>
<li>Pull requests (Added some simple changes to the theme I use for my blog)</li>
</ul>
</li>
<li>Object Oriented Programming (OOP) concepts

<ul>
<li>Reviewed inheritance, encapsulationa, and polymorphism</li>
</ul>
</li>
</ul>


<h2>Step Two: Evaluate and Redesign Plan</h2>

<p>I covered a lot of ground and I learned a lot in the process. During the past few months I have met a lot of people who have helped in one way or another. I had the chance to have short conversation with <a href="https://twitter.com/blainsmith">Blain Smith</a> from <a href="http://www.madglory.com/">Mad Glory</a>. He single handedly turned my plan upside down and was the main inspiration for this post. He told me about the importance of being framework agnostic and the benefits of focusing on learning the techniques of a software craftsman instead of just becoming adept with different technologies.</p>

<p>If you look at my initial plan, I had specially focused on learning how to use different technologies: rspec, git, Ruby, Rails, etc. I had placed a lot of importance on becoming an expert with all of these technologies. What Blain helped me realize is that while knowing how to use the tools is important, learning the techniques of a Software Craftsman what really sets one apart. The techniques he was referring to are the more abstract concepts and knowledge that a good developer should have. He was referring to techniques such as design patterns, test driven development, object oriented solutions, agile methodologies, and following best programming practices in order to write good code.</p>

<p>With this in mind I have come up with an updated version of the plan with a different set of priorities. After a little extra research I identified some resources that would help me with this revised plan.</p>

<ul>
<li>Design Patterns and Object Oriented Design

<ul>
<li><a href="http://www.amazon.com/Design-Patterns-Ruby-Russ-Olsen/dp/0321490452">Design Patterns in Ruby</a>

<ul>
<li> This will help me learn design patterns while at the same time polishing ruby skills</li>
</ul>
</li>
<li><a href="http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612/ref=tmm_hrd_title_0">Design Patterns: Elements of Reusable Object-Oriented Software</a></li>
</ul>
</li>
<li>Writing good code

<ul>
<li><a href="http://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670">Code Complete</a></li>
<li><a href="http://www.amazon.com/The-Pragmatic-Programmer-Journeyman-Master/dp/020161622X">The Pragmatic Programmer</a></li>
</ul>
</li>
<li>Testing

<ul>
<li>Practice Test driven development through small projects and exercises.</li>
</ul>
</li>
<li>Ruby &ndash; Next steps
  &ndash;* Metaprogramming</li>
<li>Techniques for Web Design

<ul>
<li>Practice web design concepts and techniques and learn more HTML and CSS (HAML and Sass) through it</li>
</ul>
</li>
</ul>


<p>So this is my new approach. Moving forward I will emphasize techniques and methodlogies instead of specific technologies. From now on the way I will learn a new language or framework is through the exploration of a new programming concept. For example, I will focus on Ruby while learning design patterns and I try Javascript when practicing web design.</p>

<h3>Learning tip</h3>

<p>In the past few months I found that the learning plan I created was very helpful. It will keep you on track and show your progress.
As a beginner it is very possible that your first learning plan will not be the best. This is why it&rsquo;s important to keep your plan flexible and continue to reevaluate it as you learn more about the topics you are exploring.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Ubuntu Laptop]]></title>
    <link href="http://codeandkaizen.herokuapp.com/blog/2013/10/06/my-ubuntu-laptop/"/>
    <updated>2013-10-06T00:39:00+00:00</updated>
    <id>http://codeandkaizen.herokuapp.com/blog/2013/10/06/my-ubuntu-laptop</id>
    <content type="html"><![CDATA[<h2>Windows Woes</h2>

<p>When I started playing with Ruby, I didn&rsquo;t even have it on my laptop. With resources like <a href="http://tryruby.org/">tryruby.org</a> and <a href="http://www.codecademy.com/">Codecademy</a> freely available online I did not need install it until I started building small programs. After I finished the tutorials I installed Ruby on my windows machine and since I wasn’t building any complicated projects, everything was fine.</p>

<p>Eventually I started blogging using <a href="http://octopress.org/">Octopress</a>. That&rsquo;s when I encountered my first issue. I had installed version 2.0 and Octopress requires Ruby 1.9.3. The Internet came to my rescue with <a href="https://github.com/vertiginous/pik">Project Pik</a>. Pik is like <a href="https://rvm.io/">RVM</a> for Windows and it allows you switch between different versions of Ruby. At first this worked well. I was able to use Octopress and deploy the first version of my blog with it. However, I ran into problems when I started <a href="http://ruby.railstutorial.org/">Michael Hartl&rsquo;s Rails Tutorials</a>. I was able to go through the initial sections but I got stuck on the advanced configuration chapters. I kept running into issues and nothing seemed to be working. Worst of all, some things would work in one version of ruby and not on the other one. I did extensive research online but nothing seemed to solve my problems completely. As soon as I finished something, a new error would show up. I was getting increasingly frustrated. Eventually I decided to skip the sections that were giving me trouble.</p>

<p>At this point I was feeling a little defeated by these issues. I was just starting out and I had spent too much time and energy on what seemed like obscure configuration problems. It was about this time when I decided to take all the comments I had seen online about using Mac or Linux over Windows seriously. It seemed that every blog or forum I was visiting while troubleshooting had a common theme: &ldquo;Use Mac or Linux, it is better&rdquo;. I usually ignore the Mac vs. PC; however, this time my problems giving me a big headache and I was ready to try anything that would help me get back to learning instead of fighting hopeless configuration wars.</p>

<h2>The Flight of the Phoenix</h2>

<p>About a year ago my college laptop died. I turned it on one day to find the following message: &ldquo;Imminent Hard Drive Failure. Backup your Data&rdquo;. That was a serious message! My laptop was not messing around. I backed up my data and retired my trusty college PC. I saved it because I knew I could probably use the parts later or replace the hard drive, but I had been thinking about getting a new system and this Hard Drive failure gave me an excuse to get a new one.</p>

<p>In the midst of my configuration issues, I found myself browsing the Apple store website and looking at the cheaper options: $999. ಠ_ಠ That was a lot more than what I was expecting. I liked the idea of having a laptop dedicated to web development but I did not like the price of Macs. At this point I remembered that I still had my old college laptop! All I needed was a new hard drive and a copy of Ubuntu and I could be using a UNIX environment which according to the Internet would solve all my problems. Finding the right parts for my laptop was a little difficult, but one cancelled order and returned hard drive later I had Ubuntu 12.04 running on my old machine!</p>

<h2>The Miracle</h2>

<p>Everything was just so much easier. Gems worked right out of the box without much configuration, RVM made installing Ruby a breeze, and the best part was the amount of relevant help I was able to find online. Finding answers for a Windows problem was very tedious, but answers for Linux issues were everywhere. Hooray! Not only were they everywhere but they were also clearly explained. Double Hooray! Whenever I fixed an issue on my windows laptop, the solution seemed so obscure and strange that always seemed like magic. It was the opposite with Linux. Every time I solved an issue on my Ubuntu installation I felt wiser. The online community would not only solve your problem but they would also make sure you understood what was going on and as bonus they would give you a link so that you could learn more about the subject.</p>

<p>Needless to say, I was very happy and thrilled. I was able to go back and redo all the initial chapters of Michael Hartl&rsquo;s tutorial and complete all the advanced configuration sections.</p>

<h2>My conclusion</h2>

<p>Developing with Ruby on Windows is not a good idea. Use it if it&rsquo;s your only option; however, trying Linux will definitely save a lot of time spent on troubleshooting.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby and the Koans]]></title>
    <link href="http://codeandkaizen.herokuapp.com/blog/2013/09/19/ruby-and-the-koans/"/>
    <updated>2013-09-19T23:26:00+00:00</updated>
    <id>http://codeandkaizen.herokuapp.com/blog/2013/09/19/ruby-and-the-koans</id>
    <content type="html"><![CDATA[<p>After finishing Codecademy&rsquo;s Web Fundamentals track I immediately started the Ruby track. I knew I wanted to go with Ruby because I had already done plenty of research on the technologies I needed to learn in order to become a web developer. I had used Ruby in the past for a very simple Ride Sharing web application I built while at school; however, I used it simply as a means to work with rails and setup the application quickly. During my student time this was OK; however, now that I have made a serious choice about becoming a web developer I need to master it.
The authors of the book <a href ="http://www.amazon.com/Apprenticeship-Patterns-Guidance-Aspiring-Craftsman/dp/0596518382/ref=sr_1_1?s=books&ie=UTF8&qid=1379649530&sr=1-1">Apprenticeship Patterns</a> point out that &ldquo;It is important that you carefully weigh the options (between programming languages), as this is the foundation upon which your early career will be built&rdquo;. I have chosen Ruby. I will immerse myself in it, play with it in my free time, solve puzzles and read the documentation until I know it all. It will be a long road but I am ready to take the first steps.
The Ruby track offered by <a href="http://www.codecademy.com/">Codecademy</a> was very good. It was very simple and easy to understand. It even had a few &ldquo;projects&rdquo; to apply the concepts learned. The sections build on each other and it is easy to go back and review previous concepts and exercises in case you forget something along the way. The Ruby track can be finished very quickly since it just a beginner&rsquo;s course.<br/>
My conclusion after CodeAcademy&rsquo;s Ruby Track:</p>

<ul>
<li>This is definitely a beginner&#8217;s course.</li>
<li>After I was done I felt that even though I could write classes, methods, procs, lambdas, and loops, there was still a lot to learn.</li> 
</ul>


<p>My initial thoughts on Ruby:</p>

<ul>
<li>I like it.</li> 
<li>It offers a lot of flexibility (There&#8217;s usually more than one way to do one thing in Ruby)</li>
<li>Ruby offers a few interesting methods and features like &#8220;each&#8221;, the flexible way to write conditions, and passing blocks.</li>
<li>It&#8217;s very easy to work with hashes.</li>
</ul>




<h2>Achieving Zen with the Ruby Koans </h2>


<p>&ldquo;If a test runs in the forest, and no one is there to see it. Does it pass?&rdquo;</p>

<p>OK that&rsquo;s enough for my attempts at programming/Zen puns.</p>

<p>After I finished CodeAcademy&rsquo;s Ruby track I felt that there was a lot more I needed to learn about the language. The CodeAcademy tutorial is definitely a beginner&rsquo;s guide. It&rsquo;s meant to get you started, and walk you through the concepts but it does not go deeper. It doesn&rsquo;t even walk the users through installing Ruby in their machines.</p>

<p>This bothered me a lot. I felt that had I learned all the Ruby basics but I couldn&rsquo;t do much with them yet. I continued to feel this way until I reached the end of chapter 4 in <a href="http://ruby.railstutorial.org/">Michel Hartl&rsquo;s Rails tutorial</a>  (I will discuss my adventures with rails later). Hidden in the exercise section at the end of chapter four I found the best resource to help me learn ruby to date: <a href="http://rubykoans.com/">The Ruby Koans</a>.</p>

<p>The Ruby Koans brought to you by the nice folks at <a href="http://www.neo.com/">Neo Innovation</a> are a way to learn Ruby through testing. The Koans are structured as a series of exercises. Each exercise includes one or more tests the user needs to make pass. Each time the user runs the Koans, the program shows the first failed test in the terminal. The user then has to find the file and the specific test that is failing in order to fix it.</p>

<p>The user is not testing a big program in these exercises. The user is testing Ruby! Here is an example of a test in the Koans:</p>

<p>This test fails and the user has to fill replace &ldquo;__&rdquo; with the expected output</p>

<figure class='code'><figcaption><span>Failing Test </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">test_creating_arrays</span>
</span><span class='line'>  <span class="n">empty_array</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="n">assert_equal</span> <span class="n">__</span><span class="p">,</span> <span class="n">empty_array</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'>  <span class="n">assert_equal</span> <span class="n">__</span><span class="p">,</span> <span class="n">empty_array</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>These changes will make the tests pass:</p>

<figure class='code'><figcaption><span>Passing Test </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">test_creating_arrays</span>
</span><span class='line'>  <span class="n">empty_array</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="n">assert_equal</span> <span class="nb">Array</span><span class="p">,</span> <span class="n">empty_array</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'>  <span class="n">assert_equal</span> <span class="mi">0</span><span class="p">,</span> <span class="n">empty_array</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are basically no hints or answer sheets (you can find solved Koans in <a href="https://github.com/">Github</a>, but why ruin these amazing exercises? This way the user is forced to think about the exercises and internalize the concepts with each test.</p>

<p>Another reason I liked the Koans is that they emphasize testing. As you advance you will find small projects and bigger exercises to work one that involve more coding than just replacing words in the text. I got so used to testing by this point that I used <a href="http://en.wikipedia.org/wiki/Test-driven_development">TDD</a> in the projects and even in the <a href="http://en.wikipedia.org/wiki/Farkle">Farkle</a> game at the end.</p>

<p>After finishing the Koans I definitely felt more adept in Ruby and was more confident in my abilities. I would recommend this style of learning to anyone that wants to learn Ruby.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Command Line]]></title>
    <link href="http://codeandkaizen.herokuapp.com/blog/2013/09/19/the-command-line/"/>
    <updated>2013-09-19T23:25:00+00:00</updated>
    <id>http://codeandkaizen.herokuapp.com/blog/2013/09/19/the-command-line</id>
    <content type="html"><![CDATA[<p>This is not completely new to me. I have used the windows and UNIX command lines in the past. I used it in school to compile programs archive them. I hadn&rsquo;t really used for anything other than that. The point is that I wasn&rsquo;t a complete stranger. I debated whether I should skip this section of my road map. However, I decided against it. Since my goal is to be proficient in every aspect of web development I not could afford missing important information in one of the basics skills. Besides I had never had any &ldquo;training&rdquo; in terms of the command line.</p>

<p>I decided to go with the <a href=” http://cli.learncodethehardway.org/book/”> Command Line Crash Course</a> by Learn code the hard way.</p>

<p>The course was really useful. It really makes a point of making the readers memorize the commands by practicing with flash cards and doing the exercises over and over again. Doing the exercises over and over again gets repetitive but you can be sure that if you follow the instructions you will be very familiar with the command line by the end of it.</p>

<p>So yes, the course will make you familiar with the command line and some of its more advanced features such as piping and redirecting; however, if you are already familiar with it. There is not that much more to learn here. I recommend it if you are completely new to it but if you are not complete beginner skip the sections you already know.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Thoughts on Octopress]]></title>
    <link href="http://codeandkaizen.herokuapp.com/blog/2013/09/19/my-thoughts-on-octopress/"/>
    <updated>2013-09-19T23:25:00+00:00</updated>
    <id>http://codeandkaizen.herokuapp.com/blog/2013/09/19/my-thoughts-on-octopress</id>
    <content type="html"><![CDATA[<p>Originally I wanted to dedicate an entire post to <a href="http://octopress.org/">Octopress</a> and how I set it up. However, in the interested of moving forward I will just write down my thoughts on it and my experience so far.</p>

<p>When I made the decision to document my learning progress and put it on the internet, I thought I was going to use a simple blog tool like <a href="http://wordpress.com/"> Wordpress</a> or <a href="http://www.blogger.com/home">Blogger</a>. I was almost ready to build my site using one of those tools when I stumbled on to a blog which influenced my own: <a href="http://learnwithjeff.com/">learnwithjeff</a>. In his blog, Jeff mentioned how he learns by teaching and he documents his learning process as well as assigns exercises for those who want to learn along with him.</p>

<p>At the bottom of his page, I saw a little label that read &ldquo;Powered by Octopress&rdquo;. I had never heard of Octopress but I was curious. I looked it up and after reading the tagline &ldquo;A blogging framework for hackers&rdquo; I decided to give it shot. I figured that blogging using a tool meant for &ldquo;hackers&rdquo; would make me a better programmer and would expose me to more technologies.</p>

<p>I was not disappointed. Octopress was easy to setup but in order to get it working and see it live I had to install <a href="https://www.ruby-lang.org/en/">Ruby</a> and <a href="http://git-scm.com/">git</a> on my PC and get <a href="https://www.heroku.com/">Heroku</a> account. This exercise alone exposed me to several new technologies and basically broke the ice. &ldquo;Heroku&rdquo; stopped being a mysterious word I had heard when reading about web development and Git became more approachable. This gave me more confidence to keep moving forward and continue learning. I was making progress and I was happy about it.</p>

<p>After a few searches I settled on a theme I liked and I was done!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git and Github]]></title>
    <link href="http://codeandkaizen.herokuapp.com/blog/2013/09/19/git-and-github/"/>
    <updated>2013-09-19T23:25:00+00:00</updated>
    <id>http://codeandkaizen.herokuapp.com/blog/2013/09/19/git-and-github</id>
    <content type="html"><![CDATA[<p>This is pretty straight forward. I had setup a <a href="https://github.com/">Github</a> account in the past. But I had rarely used it. I used the free <a href=” the http://try.github.io/levels/1/challenges/1”>Try git tutorial</a> from <a href=” http://www.codeschool.com/”>Code School</a> to help me started. I started using git with <a href="http://octopress.org/">Octopress</a> and with <a href="http://ruby.railstutorial.org/">Michael Hartl&rsquo;s Rails tutorial</a>.</p>

<p>I have started using git to version all of the code I am writing. Additionally, I have been uploading all the code I have completed from tutorials to Github.
The interesting thing about uploading code to Github is that it forced me to <a href="http://en.wikipedia.org/wiki/Code_refactoring">refactor</a> and make my code nicer. The thought that my code was out there for everyone to see, made me push myself to make it better!</p>

<p>I have used only few of the features Git and Github have to offer. I use it for code versioning mostly.Additionally, <a href="http://git-scm.com/book/en/Git-Branching">branching</a> is a useful feature that I have started to understand. With some discipline and practice I will introduce branching to my everyday coding. However, this is only the tip of the iceberg in terms of Git. Anyone interested in learning more should check out <a href=http://git-scm.com/book> the Pro Git book</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lots of updates and Diminishing Returns]]></title>
    <link href="http://codeandkaizen.herokuapp.com/blog/2013/09/19/lots-of-updates-and-diminishing-returns/"/>
    <updated>2013-09-19T23:24:00+00:00</updated>
    <id>http://codeandkaizen.herokuapp.com/blog/2013/09/19/lots-of-updates-and-diminishing-returns</id>
    <content type="html"><![CDATA[<p>Over the past couple of months I have been trying to document my achievements as I went along. I found that reflecting on the things I learned as I write about them really helped me internalize some concepts. However, after some time I reached a point where I was learning and trying new things faster than I could write about them.</p>

<p>Initially my solution to this was to write quick notes on what I had learned and write the complete blog post later.  This worked for a while but I quickly started falling behind on my blog entries and started accumulating lots of notes on the topics and technologies I had covered.</p>

<p>One thing to keep in mind when you start learning something new is that &ldquo;Diminishing Returns&rdquo; really apply to this situation. I learned the basics of a lot of technologies very quickly and did not write blog entries on it. However, I have reached a point now in which I am spending quite a bit of time going through the <a href="http://ruby.railstutorial.org/">Michael Hartl&rsquo;s Rails Tutorial</a>  and reading the <a href="http://www.amazon.com/Well-Grounded-Rubyist-David-Black/dp/1933988657/ref=sr_1_1?s=books&ie=UTF8&qid=1379647910&sr=1-1"> Well Grounded Rubyist book</a>. My learning has slowed down. That&rsquo;s not a bad thing. It just means I have covered a lot of topics and is taking me a while to get more in-depth knowledge on some of the advanced concepts. I am going to take advantage of this time and quickly catch up my blog with all the technologies I have learned over the past couple of months.</p>

<p>The next few posts will be uploaded on the same day probably. That&rsquo;s because I wrote them all in a day but the learning and experimenting occurred over several weeks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML, CSS, and Codecademy]]></title>
    <link href="http://codeandkaizen.herokuapp.com/blog/2013/09/09/html/"/>
    <updated>2013-09-09T22:39:00+00:00</updated>
    <id>http://codeandkaizen.herokuapp.com/blog/2013/09/09/html</id>
    <content type="html"><![CDATA[<p>OK so this one is a bit interesting. After playing around with Java, I decided I needed to have a really good grasp of the web fundamentals. So the next step would be HTML and CSS.</p>

<p>I had learned a bit about HTML and CSS before, but I hadn&rsquo;t really dived deep into the subject. After a few Google searches and reading a few reviews I decided to get the book HTML and &amp; CSS Design and build websites by Jon Duckett. This book was great!. Short and concise explanations paired with excellent visual design and great photographs. The book was just so pretty it was a joy to read and to hold. The book has a companion website which you can use to get the source code and images for the examples. Besides core HTML and CSS concepts, the book covers best practices, backwards and cross-browser compatibility. I recommend this book to anyone who wants to learn about HTML and CSS and get acquainted with some design concepts.</p>

<p>I was about all done with the HTML part of the book when I stumbled upon Codecademy. An enlightened internet user mentioned it on Quora and I decided to take a look out of curiosity. What a great find! You really have to give credit to the programming community for building such amazing learning resources and making them available to the public for free. Codecademy offers free coding courses through their interactive online platform, which allows its users to code right on the browser and see immediate results without any previous setup. CodeSchool and Treehouse offer paid versions of this web service. At around $25 a month, access to these websites is a bargain, they offer as similar platforms for learning paired with videos and a lot more courses to choose from. Codecademy does not have as much content as its paid counterparts but it&rsquo;s free!</p>

<p>Codecademy was just what I needed. Reading the books and following along some of the work was great but I needed additional exercises. Codecademy helped me with this. And I was quickly done with their &ldquo;Web Fundamentals&rdquo; track which included HTML and CSS. Codecademy had effectively replaced my book even though it wasn&rsquo;t as detailed. I imagine that the great people at Codecademy will add more advanced courses with time.</p>

<p>After finishing the HTML and CSS course I felt good about what I had learned. Let&rsquo;s be honest, I won&rsquo;t be able to memorize all the tags and syntax unless I use them repeatedly. But there are plenty of resources out there I can use to check for syntax rules when the time comes. I already use HTML while editing these blog posts, but CSS will be a bit harder to use on a regular basis.</p>

<p>At this point I wanted to move forward so I did. I was done with HTML &amp; CSS and Codecademy offered several tracks so I quickly moved onto Ruby.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Java Refresher]]></title>
    <link href="http://codeandkaizen.herokuapp.com/blog/2013/08/20/a-java-refresher/"/>
    <updated>2013-08-20T13:56:00+00:00</updated>
    <id>http://codeandkaizen.herokuapp.com/blog/2013/08/20/a-java-refresher</id>
    <content type="html"><![CDATA[<p>The first thing I decided to do was to refresh my knowledge of Java and object oriented programming in general. This is probably not the best option for a total beginner. Most of the resources out there that teach Web Dev skills start easy with HTML &amp; CSS as well as web fundamentals. These are great for people who have just started to learn how to code. I am not a beginner though. I am well versed in a lot of technical concepts and I have already been programming for a few years. I just needed to get back in the right mindset. Exploring something familiar would help me do that quickly. So Java it was!</p>

<p>I grabbed a copy of <a href="http://www.amazon.com/Head-First-Java-2nd-Edition/dp/0596009208">Head first: Java</a> and started to quickly going through all the concepts. I became very familiar with Java during my college years. But I have been out of practice for a while. Saying that I was a little rusty would be generous. After some reading I started to remember the concepts faster and faster.
The book was very unique. It tries to keep you interested by not being a conventional &ldquo;boring&rdquo; book, so it throws pictures at you and keeps you &ldquo;off balance&rdquo; by not following a conventional form. In short, I liked it and if I ever need to reference some Java concepts again I would probably pick it up one more time.</p>

<p>I did not read the whole book. I did not focus on syntax but I did pay a lot of attention to the sections that involved Object Oriented Programming concepts and good practices. I also went to <a href="http://codingbat.com/">CodingBat.com</a> to practice some basic concepts like recursion and solve some puzzles. This was good enough for me and I decided I was ready to move on.
I thought about starting a bigger project like a simple Android App as a way to practice some more. This was very tempting. The idea of building an App sounded very appealing and fun. Nevertheless, I decided to remain focused and stick to roadmap and topics I laid out.</p>

<p>Next: HTML and CSS</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Roadmap to the Full Stack]]></title>
    <link href="http://codeandkaizen.herokuapp.com/blog/2013/08/15/roadmap-to-the-full-stack/"/>
    <updated>2013-08-15T17:25:00+00:00</updated>
    <id>http://codeandkaizen.herokuapp.com/blog/2013/08/15/roadmap-to-the-full-stack</id>
    <content type="html"><![CDATA[<p>After some research I have narrowed down the list of technologies and topics that a junior web developer should know. To put this list together I researched the technologies that the leading web development shops are using, the curricula offered at several popular Web Dev. workshops, and different posts on the web with advice related to this subject.  I am very familiar with several of these concepts; however, I plan spend some time on all of them, I want to be thorough.</p>

<h2>The Stack</h2>

<ul>
<li>Basic programming concepts</li>
<li>the Ruby programming language</li>
<li>Rails, the framework to develop web application with Ruby</li>
<li>Libraries / Ruby Gems</li>
<li>Rspec, Test Driven Development (TDD) or Behavior Driven Development (BDD) methodologies</li>
<li>HTML and CSS, I will try HAML and Sass</li>
<li>JavaScript and jQuery</li>
<li>Database Concepts</li>
<li>Web basics &ndash; forms, HTTP request / response</li>
<li>UNIX command line and development environment</li>
<li>Deployment and Server Management</li>
<li>Git and Github, Source code version control systems</li>
<li>Object Oriented Programming (OOP) concepts</li>
</ul>


<h2>My resources</h2>

<ul>
<li><a href="http://www.codecademy.com/">Codecademy</a></li>
<li><a href="http://hackercs.com/">Hackcer CS</a></li>
<li><a href="http://codingbat.com/">CodingBat</a></li>
<li><a href="https://www.codeschool.com/">Code School</a></li>
<li><a href="http://teamtreehouse.com/">Treehouse</a></li>
<li><a href="http://exercism.io/">exercism.io</a></li>
<li><a href="http://www.pairprogramwith.me/">Pair Program with Me</a></li>
<li><a href="http://www.meetup.com/hackerhours/">Hacker Hours Meetup</a></li>
<li><a href="http://www.codetriage.com/">Code Triage</a></li>
<li><a href="http://prework.flatironschool.com/">Flatiron School</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Start of The Great Web Development Adventure of 2013]]></title>
    <link href="http://codeandkaizen.herokuapp.com/blog/2013/08/10/the-start-of-the-great-web-development-adventure-of-2013/"/>
    <updated>2013-08-10T17:24:00+00:00</updated>
    <id>http://codeandkaizen.herokuapp.com/blog/2013/08/10/the-start-of-the-great-web-development-adventure-of-2013</id>
    <content type="html"><![CDATA[<p>Do you like my title? I like my goals and projects to sound <strong>EPIC</strong>!</p>

<p>Several weeks ago I decided I wanted to become a full-fledged web developer. After reading about agile development, TDD, and the tools and languages that developers were using nowadays, I got very interested in the subject.
I made this decision after analyzing what I really liked doing professionally. It took me a couple of years of being in the workforce to really see what options were available to me and to learn what type of job I liked. Being a technology consultant helped with this because I was exposed to many different companies and wore several different throughout multiple projects.</p>

<p>Here is the breakdown:</p>

<ul>
<li>I like Building things.</li>
<li>I like programming. At work, I enjoy tasks that involved coding.</li>
<li>I like programming applications over to process automation or database management.</li>
</ul>


<p>
So it turns out, I want to be programming all day, building applications and solving problems with code.
In the next few weeks I will document my progress as I teach myself the skills necessary to be a web developer. Let the adventure begin!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Post]]></title>
    <link href="http://codeandkaizen.herokuapp.com/blog/2013/08/08/first-post/"/>
    <updated>2013-08-08T17:22:00+00:00</updated>
    <id>http://codeandkaizen.herokuapp.com/blog/2013/08/08/first-post</id>
    <content type="html"><![CDATA[<p>I am Rafael.</p>

<p>Welcome to my new blog. Here I will post about my attempts to learn new things and improve myself. I figured that writing about my learning experiences will be a good way to reflect on what I learned and at the same time document my progress.</p>

<p>A little about me:</p>

<p>I am technology consultant out of New York City. I have been working in the financial industry helping companies improve their regulatory processes through technology.</p>

<ul>
<li>I flew 100,000 miles last year.</li>
<li>I am from Lima, Peru. I lived there until I was 17.</li>
<li>I graduated from the University of Richmond with a BS in Computer Science and Mathematical Economics</li>
<li>I like books, comics, movies, and video games. </li>
<li>I have played every generation of Pokémon games.  ಠ_ಠ  </li>
<li>I like tennis but I don&#8217;t watch sports.</li>
<li>I prefer non-fiction to fiction books.</li>
</ul>


<p>And&hellip;</p>

<p>I love <a href="http://www.instructables.com/">building</a>, <a href="http://www.radiolab.org/">learning</a>, <a href="http://hackaday.com/">hacking</a>, <a href="http://www.codecademy.com/">programming</a>, and <a href="http://www.lifehacker.com">optimizing my life</a>. These last five things are my reason for creating this blog, so you will most likely find posts about them.</p>

<p>That is all for now. Introduction done!</p>

<p>Please comment! I love suggestions and ideas. Please include sources or examples when available.</p>
]]></content>
  </entry>
  
</feed>
