<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Code and Kaizen]]></title>
  <link href="http://codeandkaizen.herokuapp.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://codeandkaizen.herokuapp.com/"/>
  <updated>2014-02-10T16:39:03+00:00</updated>
  <id>http://codeandkaizen.herokuapp.com/</id>
  <author>
    <name><![CDATA[Rafael Huaman]]></name>
    <email><![CDATA[info@codeandkaizen.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Lessons in Ruby from Exercism.io]]></title>
    <link href="http://codeandkaizen.herokuapp.com/blog/2014/02/05/lessons-in-ruby-from-exercism-dot-io/"/>
    <updated>2014-02-05T23:44:00+00:00</updated>
    <id>http://codeandkaizen.herokuapp.com/blog/2014/02/05/lessons-in-ruby-from-exercism-dot-io</id>
    <content type="html"><![CDATA[<h2>Exercism.io and Patience</h2>

<p>When I started my path of personal development I gathered a lot of information on online resources to improve my skills as a programmer. That&rsquo;s when I first learned about <a href="http://exercism.io/">Exercism.io.</a> It seemed like a popular and useful resource which would introduce feedback to my learning. I bookmarked and archived it; however, I didn&rsquo;t use it right away. I got more involved with the <a href="http://ruby.railstutorial.org/">Hartl Tutorial</a>, the <a href="http://pragprog.com/book/rails4/agile-web-development-with-rails-4">Agile Web Development with Rails 4</a> book, and a few more <a href="http://www.amazon.com/Design-Patterns-Ruby-Russ-Olsen/dp/0321490452">books</a>.</p>

<p>My interested got picked again at the <a href="http://nickelcityruby.com/">Nickel City Ruby</a> conference where I heard a few people raving about how great Exercism.io was. At first nothing interesting happened, I finished the first exercise and was ready to move on. After a couple of days of not getting any feedback simply advanced to the next exercise. This is how my first two exercises went: &ldquo;finish, wait, no response? Move on&rdquo;. At this point I was wondering what made Exercism.io so special (whatever it was I was not seeing it).</p>

<p>I finished the third exercise and forgot about it. A week had passed by the time I remembered I should check on my submission. I logged in and lo and behold&hellip; I had one feedback comment! It was a suggestion from a kind stranger on how my code could be improved. This suggestion was so good I was immediately excited. It did make my code better. I finally got it! You should Exercism.io a little time until someone gets around to checking your code.</p>

<p>The following exercises went much better. I waited patiently for some feedback which would eventually arrive and improve my code and teach me more about the Ruby language.</p>

<h2>My Lessons</h2>

<h3>Adding Elements to a Hash of Arrays</h3>

<p>In one of the problems I had to implement a class that could classify students based on their grades. The straight forward solution: a hash where the grade is the key and an array of students is the value. Here&rsquo;s the catch: when looking for the students in a grade with no students assigned I should return and empty array <code>[]</code> instead of <code>null</code>.</p>

<p>Here&rsquo;s my approach:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Passing Test </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">School</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:db</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def initialize&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vi">@db</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def add(name, grade)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vi">@db</span><span class="o">[</span><span class="n">grade</span><span class="o">].</span><span class="n">empty?</span> <span class="p">?</span> <span class="vi">@db</span><span class="o">[</span><span class="n">grade</span><span class="o">]</span> <span class="o">=</span> <span class="o">[</span><span class="nb">name</span><span class="o">]</span> <span class="p">:</span> <span class="vi">@db</span><span class="o">[</span><span class="n">grade</span><span class="o">]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="nb">name</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def grade(grade)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vi">@db</span><span class="o">[</span><span class="n">grade</span><span class="o">]</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I believe this covered the requirements. <code>Hash.new([])</code> returns a new, empty hash; if this hash is subsequently accessed by a key that doesnâ€™t correspond to a hash entry, the single object <code>[]</code> will be used for all default values. So if <code>@db</code> is empty, then <code>@db[wibble]</code> will return <code>[]</code>. Looking good!</p>

<p>My biggest problem with my implementation was the add method. Even though it is written in one line (only because I am using ternary notation), it is not very readable. I wrote it that way because simply writing <code>@db[grade] &lt;&lt; name</code> did not work. Somebody suggested I use <code>@db[grade] += [name]</code>, but I didn&rsquo;t think it would work (more on this later). Why would that work when <code>@db[grade] &lt;&lt; name</code> did not?</p>

<p>Turns out using <code>@db[grade] += [name]</code> was definitely the way to go. I ran a few of tests and discovered why <code>@db[grade] &lt;&lt; [name]</code> was not working. I believe <code>@db[grade] += [name]</code> works as <code>@db[grade] = @db[grade] + [name]</code>. Since I had defined the default value of the <code>@db</code> hash to be <code>[]</code>, that expression gets interpreted as <code>@db[grade] = [] + [name]</code> which successfully performs the desired concatenation. This is pretty neat. I hadn&rsquo;t thought of this approach when I first coded this. I opted for the conditional because when I tried doing concatenation with <code>@db[grade] &lt;&lt; [name]</code> I ran into an interesting problem.</p>

<p>The interesting part was finding out why <code>@db[grade] &lt;&lt; [name]</code> was not working. This expression is essentially <code>@db[grade].push([name])</code>. This statement directly modifies the default value for the hash whenever <code>@db[grade]</code> has not been assigned a value. This was great find! It showed me difference between <code>+=</code> and <code>&lt;&lt;</code> as well how default values for a hash work.</p>

<p>My code looked like this in the end:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Passing Test </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">School</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:db</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def initialize&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vi">@db</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">[]</span><span class="p">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def add(name, grade)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vi">@db</span><span class="o">[</span><span class="n">grade</span><span class="o">]</span> <span class="o">+=</span> <span class="o">[</span><span class="nb">name</span><span class="o">]</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  def grade(grade)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="vi">@db</span><span class="o">[</span><span class="n">grade</span><span class="o">]</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>The Powerful Ruby Library</h3>

<p>The second problem I had with my code was the sort method for the same exercise. The sort method was supposed to return a hash with the grades and the names of the students in the grade sorted. I had implemented this method in the following way:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Passing Test </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="k">def</span> <span class="nf">sort</span>
</span><span class='line'>  <span class="n">sorted</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="vi">@db</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">key</span><span class="o">|</span> <span class="n">sorted</span><span class="o">[</span><span class="n">key</span><span class="o">]</span> <span class="o">=</span> <span class="vi">@db</span><span class="o">[</span><span class="n">key</span><span class="o">].</span><span class="n">sort</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">sorted</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This worked but it didn&rsquo;t seem right to me. Ruby is a very powerful language and I have seen pretty clever of ways of solving problems like this one. My solution seemed like a clunky way of doing things. Luckily someone suggested a different approach. This is the final version of the method. One line! Yey!</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Passing Test </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="k">def</span> <span class="nf">sort</span>
</span><span class='line'>   <span class="no">Hash</span><span class="o">[</span><span class="vi">@db</span><span class="o">.</span><span class="n">sort</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">grade</span><span class="p">,</span><span class="nb">name</span><span class="o">|</span> <span class="o">[</span><span class="n">grade</span><span class="p">,</span> <span class="nb">name</span><span class="o">.</span><span class="n">sort</span><span class="o">]</span> <span class="p">}</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Let&rsquo;s break it down.</p>

<ul>
<li><code>Hash#sort</code> is a useful method which returns a hash table sorted by its keys.</li>
<li><code>Enumerable#map</code> is a method that returns a new array with the results of running a block once for every element in the enumerable. In this case I am passing my sorted hash table and getting back an array in which each element looks like this <code>[grade, [name1, name2, ..., nameN]]</code>. Each element is an Array of length = 2 where the first element is the grade and the second element is a sorted array of student names.</li>
<li>The <code>Hash[]</code> method returns a hash. In one of its many forms, this method accepts an array of pairs as an argument (i.e. <code>[[key1,value1], [key2, value2],...,[keyN, valueN]]</code>) and creates a hash table.</li>
</ul>


<p>Combining all this methods makes it possible to get the full functionality of the sort method implemented in one very readable line.</p>

<h3>Enumerable to the rescue</h3>

<p>I learned my third lesson in a different exercise. This exercise was very straightforward. Given two strings count the differences between them at every position. For example, CAT and CAP have a difference of 1. One condition of the problem was to stop the counting at the end of the shorter string. For instance, CATS and CAP have a difference of 1.  Simple enough. This was first attempt.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Passing Test </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Hamming</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">compute</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="nb">test</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;hamming_diff = 0</span>
</span><span class='line'><span class="sr">[base.size,test.size].min.times do  |i| </span>
</span><span class='line'><span class="sr">  hamming_diff += 1 if base[i] != test[i]</span>
</span><span class='line'><span class="sr">end</span>
</span><span class='line'><span class="sr">hamming_diff</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This was effective. However, I was able to improve it by using the special features of the Enumerable class pointed out by another user. In Ruby, most methods that take block return an Enumerable if no block is given. Additionally, one can apply the <code>Enumerable#count</code> method which takes a block as a parameter to determine when to count an item.  Following these insights my final implementation looked like this.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Passing Test </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Hamming</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">compute</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="nb">test</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;max_length_to_compare = [base.size,test.size].min</span>
</span><span class='line'><span class="sr">max_length_to_compare.times.count { |i| base[i] != test[i] } </span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The compute method could have been expressed in one line; however, this way the method separates the two main &ldquo;ideas&rdquo; in the code: finding the maximum length for the comparison and the counting loop. I believe that separating the ideas makes it into a very readable implementation.</p>

<h2>Conclusion</h2>

<p><a href="http://exercism.io/">Exercism.io</a> is not meant for you to plough through all the exercises. It is meant for careful review, collaboration, and revision so that you can learn how to write the best code possible. The users in the site will be helpful but you just have to be a little patient and wait for their input.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Ubuntu Laptop]]></title>
    <link href="http://codeandkaizen.herokuapp.com/blog/2013/10/06/my-ubuntu-laptop/"/>
    <updated>2013-10-06T00:39:00+00:00</updated>
    <id>http://codeandkaizen.herokuapp.com/blog/2013/10/06/my-ubuntu-laptop</id>
    <content type="html"><![CDATA[<h2>Windows Woes</h2>

<p>When I started playing with Ruby, I didn&rsquo;t even have it on my laptop. With resources like <a href="http://tryruby.org/">tryruby.org</a> and <a href="http://www.codecademy.com/">Codecademy</a> freely available online I did not need install it until I started building small programs. After I finished the tutorials I installed Ruby on my windows machine and since I wasnâ€™t building any complicated projects, everything was fine.</p>

<p>Eventually I started blogging using <a href="http://octopress.org/">Octopress</a>. That&rsquo;s when I encountered my first issue. I had installed version 2.0 and Octopress requires Ruby 1.9.3. The Internet came to my rescue with <a href="https://github.com/vertiginous/pik">Project Pik</a>. Pik is like <a href="https://rvm.io/">RVM</a> for Windows and it allows you switch between different versions of Ruby. At first this worked well. I was able to use Octopress and deploy the first version of my blog with it. However, I ran into problems when I started <a href="http://ruby.railstutorial.org/">Michael Hartl&rsquo;s Rails Tutorials</a>. I was able to go through the initial sections but I got stuck on the advanced configuration chapters. I kept running into issues and nothing seemed to be working. Worst of all, some things would work in one version of ruby and not on the other one. I did extensive research online but nothing seemed to solve my problems completely. As soon as I finished something, a new error would show up. I was getting increasingly frustrated. Eventually I decided to skip the sections that were giving me trouble.</p>

<p>At this point I was feeling a little defeated by these issues. I was just starting out and I had spent too much time and energy on what seemed like obscure configuration problems. It was about this time when I decided to take all the comments I had seen online about using Mac or Linux over Windows seriously. It seemed that every blog or forum I was visiting while troubleshooting had a common theme: &ldquo;Use Mac or Linux, it is better&rdquo;. I usually ignore the Mac vs. PC; however, this time my problems giving me a big headache and I was ready to try anything that would help me get back to learning instead of fighting hopeless configuration wars.</p>

<h2>The Flight of the Phoenix</h2>

<p>About a year ago my college laptop died. I turned it on one day to find the following message: &ldquo;Imminent Hard Drive Failure. Backup your Data&rdquo;. That was a serious message! My laptop was not messing around. I backed up my data and retired my trusty college PC. I saved it because I knew I could probably use the parts later or replace the hard drive, but I had been thinking about getting a new system and this Hard Drive failure gave me an excuse to get a new one.</p>

<p>In the midst of my configuration issues, I found myself browsing the Apple store website and looking at the cheaper options: $999. à² _à²  That was a lot more than what I was expecting. I liked the idea of having a laptop dedicated to web development but I did not like the price of Macs. At this point I remembered that I still had my old college laptop! All I needed was a new hard drive and a copy of Ubuntu and I could be using a UNIX environment which according to the Internet would solve all my problems. Finding the right parts for my laptop was a little difficult, but one cancelled order and returned hard drive later I had Ubuntu 12.04 running on my old machine!</p>

<h2>The Miracle</h2>

<p>Everything was just so much easier. Gems worked right out of the box without much configuration, RVM made installing Ruby a breeze, and the best part was the amount of relevant help I was able to find online. Finding answers for a Windows problem was very tedious, but answers for Linux issues were everywhere. Hooray! Not only were they everywhere but they were also clearly explained. Double Hooray! Whenever I fixed an issue on my windows laptop, the solution seemed so obscure and strange that always seemed like magic. It was the opposite with Linux. Every time I solved an issue on my Ubuntu installation I felt wiser. The online community would not only solve your problem but they would also make sure you understood what was going on and as bonus they would give you a link so that you could learn more about the subject.</p>

<p>Needless to say, I was very happy and thrilled. I was able to go back and redo all the initial chapters of Michael Hartl&rsquo;s tutorial and complete all the advanced configuration sections.</p>

<h2>My conclusion</h2>

<p>Developing with Ruby on Windows is not a good idea. Use it if it&rsquo;s your only option; however, trying Linux will definitely save a lot of time spent on troubleshooting.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby and the Koans]]></title>
    <link href="http://codeandkaizen.herokuapp.com/blog/2013/09/19/ruby-and-the-koans/"/>
    <updated>2013-09-19T23:26:00+00:00</updated>
    <id>http://codeandkaizen.herokuapp.com/blog/2013/09/19/ruby-and-the-koans</id>
    <content type="html"><![CDATA[<p>After finishing Codecademy&rsquo;s Web Fundamentals track I immediately started the Ruby track. I knew I wanted to go with Ruby because I had already done plenty of research on the technologies I needed to learn in order to become a web developer. I had used Ruby in the past for a very simple Ride Sharing web application I built while at school; however, I used it simply as a means to work with rails and setup the application quickly. During my student time this was OK; however, now that I have made a serious choice about becoming a web developer I need to master it.
The authors of the book <a href ="http://www.amazon.com/Apprenticeship-Patterns-Guidance-Aspiring-Craftsman/dp/0596518382/ref=sr_1_1?s=books&ie=UTF8&qid=1379649530&sr=1-1">Apprenticeship Patterns</a> point out that &ldquo;It is important that you carefully weigh the options (between programming languages), as this is the foundation upon which your early career will be built&rdquo;. I have chosen Ruby. I will immerse myself in it, play with it in my free time, solve puzzles and read the documentation until I know it all. It will be a long road but I am ready to take the first steps.
The Ruby track offered by <a href="http://www.codecademy.com/">Codecademy</a> was very good. It was very simple and easy to understand. It even had a few &ldquo;projects&rdquo; to apply the concepts learned. The sections build on each other and it is easy to go back and review previous concepts and exercises in case you forget something along the way. The Ruby track can be finished very quickly since it just a beginner&rsquo;s course.<br/>
My conclusion after CodeAcademy&rsquo;s Ruby Track:</p>

<ul>
<li>This is definitely a beginner's course.</li>
<li>After I was done I felt that even though I could write classes, methods, procs, lambdas, and loops, there was still a lot to learn.</li> 
</ul>


<p>My initial thoughts on Ruby:</p>

<ul>
<li>I like it.</li> 
<li>It offers a lot of flexibility (There's usually more than one way to do one thing in Ruby)</li>
<li>Ruby offers a few interesting methods and features like "each", the flexible way to write conditions, and passing blocks.</li>
<li>It's very easy to work with hashes.</li>
</ul>




<h2>Achieving Zen with the Ruby Koans </h2>


<p>&ldquo;If a test runs in the forest, and no one is there to see it. Does it pass?&rdquo;</p>

<p>OK that&rsquo;s enough for my attempts at programming/Zen puns.</p>

<p>After I finished CodeAcademy&rsquo;s Ruby track I felt that there was a lot more I needed to learn about the language. The CodeAcademy tutorial is definitely a beginner&rsquo;s guide. It&rsquo;s meant to get you started, and walk you through the concepts but it does not go deeper. It doesn&rsquo;t even walk the users through installing Ruby in their machines.</p>

<p>This bothered me a lot. I felt that had I learned all the Ruby basics but I couldn&rsquo;t do much with them yet. I continued to feel this way until I reached the end of chapter 4 in <a href="http://ruby.railstutorial.org/">Michel Hartl&rsquo;s Rails tutorial</a>  (I will discuss my adventures with rails later). Hidden in the exercise section at the end of chapter four I found the best resource to help me learn ruby to date: <a href="http://rubykoans.com/">The Ruby Koans</a>.</p>

<p>The Ruby Koans brought to you by the nice folks at <a href="http://www.neo.com/">Neo Innovation</a> are a way to learn Ruby through testing. The Koans are structured as a series of exercises. Each exercise includes one or more tests the user needs to make pass. Each time the user runs the Koans, the program shows the first failed test in the terminal. The user then has to find the file and the specific test that is failing in order to fix it.</p>

<p>The user is not testing a big program in these exercises. The user is testing Ruby! Here is an example of a test in the Koans:</p>

<p>This test fails and the user has to fill replace &ldquo;__&rdquo; with the expected output</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Failing Test </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">test_creating_arrays</span>
</span><span class='line'>  <span class="n">empty_array</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="n">assert_equal</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">empty_array</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'>  <span class="n">assert_equal</span> <span class="o">&lt;</span><span class="sr">/strong&gt;, empty_array.size</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>These changes will make the tests pass:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Passing Test </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="k">def</span> <span class="nf">test_creating_arrays</span>
</span><span class='line'>  <span class="n">empty_array</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="n">assert_equal</span> <span class="nb">Array</span><span class="p">,</span> <span class="n">empty_array</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'>  <span class="n">assert_equal</span> <span class="mi">0</span><span class="p">,</span> <span class="n">empty_array</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>There are basically no hints or answer sheets (you can find solved Koans in <a href="https://github.com/">Github</a>, but why ruin these amazing exercises? This way the user is forced to think about the exercises and internalize the concepts with each test.</p>

<p>Another reason I liked the Koans is that they emphasize testing. As you advance you will find small projects and bigger exercises to work one that involve more coding than just replacing words in the text. I got so used to testing by this point that I used <a href="http://en.wikipedia.org/wiki/Test-driven_development">TDD</a> in the projects and even in the <a href="http://en.wikipedia.org/wiki/Farkle">Farkle</a> game at the end.</p>

<p>After finishing the Koans I definitely felt more adept in Ruby and was more confident in my abilities. I would recommend this style of learning to anyone that wants to learn Ruby.</p>
]]></content>
  </entry>
  
</feed>
