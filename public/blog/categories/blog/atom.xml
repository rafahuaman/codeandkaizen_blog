<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: blog | Code and Kaizen]]></title>
  <link href="http://codeandkaizen.herokuapp.com/blog/categories/blog/atom.xml" rel="self"/>
  <link href="http://codeandkaizen.herokuapp.com/"/>
  <updated>2013-10-06T00:53:31-04:00</updated>
  <id>http://codeandkaizen.herokuapp.com/</id>
  <author>
    <name><![CDATA[Rafael Huaman]]></name>
    <email><![CDATA[info@codeandkaizen.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My Ubuntu Laptop]]></title>
    <link href="http://codeandkaizen.herokuapp.com/blog/2013/10/06/my-ubuntu-laptop/"/>
    <updated>2013-10-06T00:39:00-04:00</updated>
    <id>http://codeandkaizen.herokuapp.com/blog/2013/10/06/my-ubuntu-laptop</id>
    <content type="html"><![CDATA[<h2>Windows Woes</h2>

<p>When I started playing with Ruby, I didn&rsquo;t even have it on my laptop. With resources like <a href="http://tryruby.org/">tryruby.org</a> and <a href="http://www.codecademy.com/">Codecademy</a> freely available online I did not need install it until I started building small programs. After I finished the tutorials I installed Ruby on my windows machine and since I wasn’t building any complicated projects, everything was fine.</p>

<p>Eventually I started blogging using <a href="http://octopress.org/">Octopress</a>. That&rsquo;s when I encountered my first issue. I had installed version 2.0 and Octopress requires Ruby 1.9.3. The Internet came to my rescue with <a href="https://github.com/vertiginous/pik">Project Pik</a>. Pik is like <a href="https://rvm.io/">RVM</a> for Windows and it allows you switch between different versions of Ruby. At first this worked well. I was able to use Octopress and deploy the first version of my blog with it. However, I ran into problems when I started <a href="http://ruby.railstutorial.org/">Michael Hartl&rsquo;s Rails Tutorials</a>. I was able to go through the initial sections but I got stuck on the advanced configuration chapters. I kept running into issues and nothing seemed to be working. Worst of all, some things would work in one version of ruby and not on the other one. I did extensive research online but nothing seemed to solve my problems completely. As soon as I finished something, a new error would show up. I was getting increasingly frustrated. Eventually I decided to skip the sections that were giving me trouble.</p>

<p>At this point I was feeling a little defeated by these issues. I was just starting out and I had spent too much time and energy on what seemed like obscure configuration problems. It was about this time when I decided to take all the comments I had seen online about using Mac or Linux over Windows seriously. It seemed that every blog or forum I was visiting while troubleshooting had a common theme: &ldquo;Use Mac or Linux, it is better&rdquo;. I usually ignore the Mac vs. PC; however, this time my problems giving me a big headache and I was ready to try anything that would help me get back to learning instead of fighting hopeless configuration wars.</p>

<h2>The Flight of the Phoenix</h2>

<p>About a year ago my college laptop died. I turned it on one day to find the following message: &ldquo;Imminent Hard Drive Failure. Backup your Data&rdquo;. That was a serious message! My laptop was not messing around. I backed up my data and retired my trusty college PC. I saved it because I knew I could probably use the parts later or replace the hard drive, but I had been thinking about getting a new system and this Hard Drive failure gave me an excuse to get a new one.</p>

<p>In the midst of my configuration issues, I found myself browsing the Apple store website and looking at the cheaper options: $999. ಠ_ಠ That was a lot more than what I was expecting. I liked the idea of having a laptop dedicated to web development but I did not like the price of Macs. At this point I remembered that I still had my old college laptop! All I needed was a new hard drive and a copy of Ubuntu and I could be using a UNIX environment which according to the Internet would solve all my problems. Finding the right parts for my laptop was a little difficult, but one cancelled order and returned hard drive later I had Ubuntu 12.04 running on my old machine!</p>

<h2>The Miracle</h2>

<p>Everything was just so much easier. Gems worked right out of the box without much configuration, RVM made installing Ruby a breeze, and the best part was the amount of relevant help I was able to find online. Finding answers for a Windows problem was very tedious, but answers for Linux issues were everywhere. Hooray! Not only were they everywhere but they were also clearly explained. Double Hooray! Whenever I fixed an issue on my windows laptop, the solution seemed so obscure and strange that always seemed like magic. It was the opposite with Linux. Every time I solved an issue on my Ubuntu installation I felt wiser. The online community would not only solve your problem but they would also make sure you understood what was going on and as bonus they would give you a link so that you could learn more about the subject.</p>

<p>Needless to say, I was very happy and thrilled. I was able to go back and redo all the initial chapters of Michael Hartl&rsquo;s tutorial and complete all the advanced configuration sections.</p>

<h2>My conclusion</h2>

<p>Developing with Ruby on Windows is not a good idea. Use it if it&rsquo;s your only option; however, trying Linux will definitely save a lot of time spent on troubleshooting.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby and the Koans]]></title>
    <link href="http://codeandkaizen.herokuapp.com/blog/2013/09/19/ruby-and-the-koans/"/>
    <updated>2013-09-19T23:26:00-04:00</updated>
    <id>http://codeandkaizen.herokuapp.com/blog/2013/09/19/ruby-and-the-koans</id>
    <content type="html"><![CDATA[<p>After finishing Codecademy&rsquo;s Web Fundamentals track I immediately started the Ruby track. I knew I wanted to go with Ruby because I had already done plenty of research on the technologies I needed to learn in order to become a web developer. I had used Ruby in the past for a very simple Ride Sharing web application I built while at school; however, I used it simply as a means to work with rails and setup the application quickly. During my student time this was OK; however, now that I have made a serious choice about becoming a web developer I need to master it.
The authors of the book <a href ="http://www.amazon.com/Apprenticeship-Patterns-Guidance-Aspiring-Craftsman/dp/0596518382/ref=sr_1_1?s=books&ie=UTF8&qid=1379649530&sr=1-1">Apprenticeship Patterns</a> point out that &ldquo;It is important that you carefully weigh the options (between programming languages), as this is the foundation upon which your early career will be built&rdquo;. I have chosen Ruby. I will immerse myself in it, play with it in my free time, solve puzzles and read the documentation until I know it all. It will be a long road but I am ready to take the first steps.
The Ruby track offered by <a href="http://www.codecademy.com/">Codecademy</a> was very good. It was very simple and easy to understand. It even had a few &ldquo;projects&rdquo; to apply the concepts learned. The sections build on each other and it is easy to go back and review previous concepts and exercises in case you forget something along the way. The Ruby track can be finished very quickly since it just a beginner&rsquo;s course.<br/>
My conclusion after CodeAcademy&rsquo;s Ruby Track:</p>

<ul>
<li>This is definitely a beginner's course.</li>
<li>After I was done I felt that even though I could write classes, methods, procs, lambdas, and loops, there was still a lot to learn.</li> 
</ul>


<p>My initial thoughts on Ruby:</p>

<ul>
<li>I like it.</li> 
<li>It offers a lot of flexibility (There's usually more than one way to do one thing in Ruby)</li>
<li>Ruby offers a few interesting methods and features like "each", the flexible way to write conditions, and passing blocks.</li>
<li>It's very easy to work with hashes.</li>
</ul>




<h2>Achieving Zen with the Ruby Koans </h2>


<p>&ldquo;If a test runs in the forest, and no one is there to see it. Does it pass?&rdquo;</p>

<p>OK that&rsquo;s enough for my attempts at programming/Zen puns.</p>

<p>After I finished CodeAcademy&rsquo;s Ruby track I felt that there was a lot more I needed to learn about the language. The CodeAcademy tutorial is definitely a beginner&rsquo;s guide. It&rsquo;s meant to get you started, and walk you through the concepts but it does not go deeper. It doesn&rsquo;t even walk the users through installing Ruby in their machines.</p>

<p>This bothered me a lot. I felt that had I learned all the Ruby basics but I couldn&rsquo;t do much with them yet. I continued to feel this way until I reached the end of chapter 4 in <a href="http://ruby.railstutorial.org/">Michel Hartl&rsquo;s Rails tutorial</a>  (I will discuss my adventures with rails later). Hidden in the exercise section at the end of chapter four I found the best resource to help me learn ruby to date: <a href="http://rubykoans.com/">The Ruby Koans</a>.</p>

<p>The Ruby Koans brought to you by the nice folks at <a href="http://www.neo.com/">Neo Innovation</a> are a way to learn Ruby through testing. The Koans are structured as a series of exercises. Each exercise includes one or more tests the user needs to make pass. Each time the user runs the Koans, the program shows the first failed test in the terminal. The user then has to find the file and the specific test that is failing in order to fix it.</p>

<p>The user is not testing a big program in these exercises. The user is testing Ruby! Here is an example of a test in the Koans:</p>

<p>This test fails and the user has to fill replace &ldquo;__&rdquo; with the expected output</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Failing Test </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">test_creating_arrays</span>
</span><span class='line'>  <span class="n">empty_array</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="n">assert_equal</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="p">,</span> <span class="n">empty_array</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'>  <span class="n">assert_equal</span> <span class="o">&lt;</span><span class="sr">/strong&gt;, empty_array.size</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>These changes will make the tests pass:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Passing Test </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="k">def</span> <span class="nf">test_creating_arrays</span>
</span><span class='line'>  <span class="n">empty_array</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="n">assert_equal</span> <span class="nb">Array</span><span class="p">,</span> <span class="n">empty_array</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'>  <span class="n">assert_equal</span> <span class="mi">0</span><span class="p">,</span> <span class="n">empty_array</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>There are basically no hints or answer sheets (you can find solved Koans in <a href="https://github.com/">Github</a>, but why ruin these amazing exercises? This way the user is forced to think about the exercises and internalize the concepts with each test.</p>

<p>Another reason I liked the Koans is that they emphasize testing. As you advance you will find small projects and bigger exercises to work one that involve more coding than just replacing words in the text. I got so used to testing by this point that I used <a href="http://en.wikipedia.org/wiki/Test-driven_development">TDD</a> in the projects and even in the <a href="http://en.wikipedia.org/wiki/Farkle">Farkle</a> game at the end.</p>

<p>After finishing the Koans I definitely felt more adept in Ruby and was more confident in my abilities. I would recommend this style of learning to anyone that wants to learn Ruby.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Command Line]]></title>
    <link href="http://codeandkaizen.herokuapp.com/blog/2013/09/19/the-command-line/"/>
    <updated>2013-09-19T23:25:00-04:00</updated>
    <id>http://codeandkaizen.herokuapp.com/blog/2013/09/19/the-command-line</id>
    <content type="html"><![CDATA[<p>This is not completely new to me. I have used the windows and UNIX command lines in the past. I used it in school to compile programs archive them. I hadn&rsquo;t really used for anything other than that. The point is that I wasn&rsquo;t a complete stranger. I debated whether I should skip this section of my road map. However, I decided against it. Since my goal is to be proficient in every aspect of web development I not could afford missing important information in one of the basics skills. Besides I had never had any &ldquo;training&rdquo; in terms of the command line.
I decided to go with the <a href=” http://cli.learncodethehardway.org/book/”> Command Line Crash Course</a> by Learn code the hard way.
The course was really useful. It really makes a point of making the readers memorize the commands by practicing with flash cards and doing the exercises over and over again. Doing the exercises over and over again gets repetitive but you can be sure that if you follow the instructions you will be very familiar with the command line by the end of it.
So yes, the course will make you familiar with the command line and some of its more advanced features such as piping and redirecting; however, if you are already familiar with it. There is not that much more to learn here. I recommend it if you are completely new to it but if you are not complete beginner skip the sections you already know.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Thoughts on Octopress]]></title>
    <link href="http://codeandkaizen.herokuapp.com/blog/2013/09/19/my-thoughts-on-octopress/"/>
    <updated>2013-09-19T23:25:00-04:00</updated>
    <id>http://codeandkaizen.herokuapp.com/blog/2013/09/19/my-thoughts-on-octopress</id>
    <content type="html"><![CDATA[<p>Originally I wanted to dedicate an entire post to <a href="http://octopress.org/">Octopress</a> and how I set it up. However, in the interested of moving forward I will just write down my thoughts on it and my experience so far.
When I made the decision to document my learning progress and put it on the internet, I thought I was going to use a simple blog tool like <a href="http://wordpress.com/"> Wordpress</a> or <a href="http://www.blogger.com/home">Blogger</a>. I was almost ready to build my site using one of those tools when I stumbled on to a blog which influenced my own: <a href="http://learnwithjeff.com/">learnwithjeff</a>. In his blog, Jeff mentioned how he learns by teaching and he documents his learning process as well as assigns exercises for those who want to learn along with him.
At the bottom of his page, I saw a little label that said &ldquo;Powered by Octopress&rdquo;. I had never heard of Octopress but I was curious. I looked it up and after reading the tagline &ldquo;A blogging framework for hackers&rdquo; I decided to give it shot. I figured that blogging using a tool meant for &ldquo;hackers&rdquo; would make me a better programmer and would expose me to more technologies.
I was not disappointed. Octopress was easy to setup but in order to get it working and see it live I had to install <a href="https://www.ruby-lang.org/en/">Ruby</a> and <a href="http://git-scm.com/">git</a> on my PC and get <a href="https://www.heroku.com/">Heroku</a> account. This exercise alone exposed me to several new technologies and basically broke the ice. &ldquo;Heroku&rdquo; stopped being a mysterious word I had heard when reading about web development and Git became more approachable. This gave me more confidence to keep moving forward and continue learning. I was making progress and I was happy about it.
After a few searches I settled on a theme I liked and I was done!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git and Github]]></title>
    <link href="http://codeandkaizen.herokuapp.com/blog/2013/09/19/git-and-github/"/>
    <updated>2013-09-19T23:25:00-04:00</updated>
    <id>http://codeandkaizen.herokuapp.com/blog/2013/09/19/git-and-github</id>
    <content type="html"><![CDATA[<p>This is pretty straight forward. I had setup a <a href="https://github.com/">Github</a> account in the past. But I had rarely used it. I used the free <a href=” the http://try.github.io/levels/1/challenges/1”>Try git tutorial</a> from <a href=” http://www.codeschool.com/”>Code School</a> to help me started. I started using git with <a href="http://octopress.org/">Octopress</a> and with <a href="http://ruby.railstutorial.org/">Michael Hartl&rsquo;s Rails tutorial</a>.
I have started using git to version all of the code I am writing. Additionally, I have been uploading all the code I have completed from tutorials to Github.
The interesting thing about uploading code to Github is that it forced me to <a href="http://en.wikipedia.org/wiki/Code_refactoring">refactor</a> and make my code nicer. The thought that my code was out there for everyone to see, made me push myself to make it better!
I have used only few of the features Git and Github have to offer. I use it for code versioning mostly.Additionally, <a href="http://git-scm.com/book/en/Git-Branching">branching</a> is a useful feature that I have started to understand. With some discipline and practice I will introduce branching to my everyday coding. However, this is only the tip of the iceberg in terms of Git. Anyone interested in learning more should check out <a href=http://git-scm.com/book> the Pro Git book</a>.</p>
]]></content>
  </entry>
  
</feed>
