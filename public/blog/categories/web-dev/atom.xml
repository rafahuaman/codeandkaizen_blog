<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: web dev | Code and Kaizen]]></title>
  <link href="http://codeandkaizen.herokuapp.com/blog/categories/web-dev/atom.xml" rel="self"/>
  <link href="http://codeandkaizen.herokuapp.com/"/>
  <updated>2014-08-03T23:18:13+00:00</updated>
  <id>http://codeandkaizen.herokuapp.com/</id>
  <author>
    <name><![CDATA[Rafael Huaman]]></name>
    <email><![CDATA[info@codeandkaizen.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Applying what I learned to my job]]></title>
    <link href="http://codeandkaizen.herokuapp.com/blog/2014/05/13/applying-what-i-learned-to-my-job/"/>
    <updated>2014-05-13T23:00:00+00:00</updated>
    <id>http://codeandkaizen.herokuapp.com/blog/2014/05/13/applying-what-i-learned-to-my-job</id>
    <content type="html"><![CDATA[<p>I am writing this post because I want to document what I consider one of my biggest victories in this learning journey of mine. Additionally, I want to share how learning something new can impact your job even if they are seemingly unrelated. In this post I will briefly explain how I built a custom <a href="http://en.wikipedia.org/wiki/Object-relational_mapping">ORM</a> solution for <a href="http://www.teradata.com/?LangType=1033">Teradata</a> in VB.Net.</p>

<h3>Legacy and when non-coders code</h3>

<p>Recently I was a given control of a project at work. This project was a simple automation tool which read and wrote to a database and accepted user input through a GUI. Pretty standard stuff. It was been written by business analysts who knew how to code a little but had no further interest in software development. The lack of good technical direction allowed for a few bad practices. As a result, some of the things that <em>got the job done</em> in beginning did not seem acceptable going forward.</p>

<p>One of the areas in which the tool was noticeably weak was communication with the database. Back when there was only one use-case, the developers did not think it was a big deal to duplicate code when connecting to the DB. After all they were only doing this a handful of times.  This means that for each database interaction the developer was defining a connection string, opening the database connection, defining a query, executing it, iterating through the resulting set, and closing the connection. This is a lot of code for just one query.</p>

<h3>Rails and Research</h3>

<p>Not too long ago I finished working through two rails tutorials and started working on my own application (more on that later). Since them I have become very familiar with rails.  Rails introduced me to the concept of <a href="http://en.wikipedia.org/wiki/Object-relational_mapping">Object Relational Mapping</a>. As I became better at Rails and learned more about <a href="http://guides.rubyonrails.org/active_record_basics.html">Active Record</a> (Rails ORM solution) I appreciated it more.</p>

<p>Armed with my recent knowledge about ORM frameworks I started to research open-source solutions that would work with the database we were using. Teradata is not an open source and it is relatively new; consequently there is not a lot of free stuff out there that supports it. After a couple of hours I came up empty handed.</p>

<p>This is when I decided I was going to build my own ORM framework. It seemed daunting at first, but  I was going to abstract a lot of the connection code anyway in order to make the code <a href="http://en.wikipedia.org/wiki/Don't_repeat_yourself">DRY</a>. After that abstraction, it seemed that I was only a few steps away from having an ORM. SO I decided to give it shot.</p>

<h3>My first ORM</h3>

<p>So here&rsquo;s what I did.</p>

<ul>
<li>First I put all of the connection handling logic in one class. So this class would be in charge of opening and closing connections.</li>
<li>Then I built a couple of Agent classes to handle queries and non-queries. They would send the queries to the connections, loop through the results; and return them in a standard format.</li>
</ul>


<p>These two things combined pretty much solved my initial problem. Instead of writing out all that connection code I mentioned at first I could write QueryAgent.execute(&ldquo;SELECT * FROM Users&rdquo;) and get a standard Datatable object as a result. All the connection opening and closing would be handled automatically. The hassle of connecting to the databse became a one-liner. This was good start.</p>

<ul>
<li>The next thing I did was to start working on an Active Record class. At the same time I worked on a queryBuilder class.</li>
</ul>


<p>I based my active records class on my knowledge of Rails. This class handled all the generic <a href="http://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a> functionality for all my models and would make a lot of use of my query and non-query agent classes. Essensiattly the AR class provided an API which turned CRUD actions into SQL statements. For example, <em>create</em> would become QueryAgent.execute(&ldquo;Insert into &hellip;.&rdquo;).</p>

<p>My AR class used the queryBuilder class to build all the custom queries it needed in order to be able to support several many tables with different schemas. The QueryBuilder class would differentiate between models using some key variables and build the appropriate queries. In other words it was the QueryBuilder&rsquo;s job to produce &ldquo;INSERT INTO Users&hellip;&rdquo; and &ldquo;INSERT INTO Products&hellip;&rdquo; correctly.</p>

<h3>Done and done!</h3>

<p>So that&rsquo;s the quick explanation. It took a few days to put all of this together. As an added bonus I built this using TDD so all the functionality of my Active Record class was tested and gave me a lot of confidence in the solution I was implemented.</p>

<p>I was very proud of this. Building my own ORM solution made me feel more like a real hacker, gave me a lot of confidence in my own abilities, and validated the time and effort I spend learning and practicing outside of work.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working through two Rails tutorials]]></title>
    <link href="http://codeandkaizen.herokuapp.com/blog/2014/03/01/working-through-two-rails-tutorials/"/>
    <updated>2014-03-01T22:16:00+00:00</updated>
    <id>http://codeandkaizen.herokuapp.com/blog/2014/03/01/working-through-two-rails-tutorials</id>
    <content type="html"><![CDATA[<h3>After the first one</h3>

<p>A few months ago I completed the Hartlâ€™s rails tutorial. I bragged a little about it on this post right <a href="blog/2013/12/24/hartls-rails-tutorial-im-done/">here</a>.  I felt really good about it; however, I noticed that once I was done with the book I could hardly remember many of the details I had learned at the beginning. I realized that I had a better intuition about how it all went together and was very familiar with the Rails environment but I still had look up a lot of things and go back in the book to remember how to do specific things. All things considered, I couldn&rsquo;t expect more; I was starting out and that had been my first venture with Rails. I considered it successful.</p>

<p>One of the things that made it a succes for me was that the project demystified Rails for me. After I was done, Rails (and full stack web development) didn&rsquo;t seem as scary and on the way I picked up new technologies and techniques. Even though I wasn&rsquo;t a Rails guru, I was pretty confident I could get many things done as long as I looked them up.</p>

<h3>Now what?</h3>

<p>Long before I had finished the Hartl tutorial I had already decided I was going to work on a <a href="http://pragprog.com/book/rails4/agile-web-development-with-rails-4">second book</a> in pretty much the same way. I wanted the second tutorial to offer a different perspective and at the same time reinforce the things I had learned with the first book. I have to say this worked very well. Not only did working through a second book accomplished what I was looking for but it also showed me my strong and weak areas. Basically if while reading the second book I found myself nodding and thinking <em>&ldquo;Yes, this makes sense&rdquo;</em>, then I had a good grasp on the concept; on the other hand, if I read something and with a blank stare, thinking <em>&ldquo;I have never heard of this before&rdquo;</em>, then it was something to which I needed to pay extra attention.</p>

<h3>Comparing the tutorials</h3>

<p>With that little introduction out of the way I will proceed to comment on the differences that jumped out at me.</p>

<p><em>Disclaimer</em>: I have to add the disclaimer that I only worked through part 1 and 2 of the &ldquo;Agile Web Development with Rails 4&rdquo; (AWDWR4) these sections essentially walk you through building a sample application like the Hartl tutorial; part 3 of the book covers additional Rails topics more in-depth does not included <em>code-along</em> exercises.</p>

<h4>Testing</h4>

<p>One of the main differences I noticed was that the Hartl tutorial is more focused on testing than AWDWR4. Hartl&rsquo;s <a href="http://en.wikipedia.org/wiki/Test-driven_development">red-green-refactor cycle</a> is present throughout the book and he spends a more time on using tools that help with testing. Hartl works with Rspec and FactoryGirl as opposed to AWDWR4 which uses the Rails out-of-the-box test solution as well as Fixtures to accomplish the same things. AWDWR4 does not test everything and only tests a few big changes and walks the user through one test user story.</p>

<p>I think Hartl&rsquo;s book does a better job with testing especially since beginners should be exposed to good practices when discovering Rails.</p>

<h4>CSS magic</h4>

<p>Hartl&rsquo;s tutorial uses <a href="http://getbootstrap.com/">Bootstrap</a> whereas AWDWR4 does not. The simple introduction of Bootstrap makes Hartl&rsquo;s tutorial project look better than the AWDWR4 counterpart. AWDWR4 does not focus on looks and it shows; the final project ends up looking like a website from the 90s.  However, in order to get Hartl&rsquo;s project to look nice one has to copy and paste a lot of CSS styling. This felt like cheating. On this regard AWDWR4 feels more honest. AWDWR4 does not fool you into thinking that you will be able to create good-looking websites; that&rsquo;s a different topic completely. However, Hartl introduces his readers to front-end frameworks. This might be enough to let his readers know that such tools exist and are freely available.</p>

<h4>Scaffolding</h4>

<p>For those who don&rsquo;t know, <a href="http://guides.rubyonrails.org/v3.2.13/getting_started.html#getting-up-and-running-quickly-with-scaffolding">scaffolding</a> is the Rails feature that automates the creation of a lot of necessary files to enable <a href="http://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a> acctions for your data models. Think about it as a button that says &ldquo;create engine&rdquo; when building a car, once you press it a working engine appears in front of you ready to be customized for your needs.</p>

<p>Hartl explains his approach early on in the book. In the demo chapter he shows the users how quickly he can build something by using rails scaffolding. After this he proceeds to build everything manually for the rest of his book. Hartl explains that this automation, although powerful and useful, is not conducive to teaching because the automation ends up doing a lot of things for you that rails developers need to learn in order to work effectively with the framework.</p>

<p>AWDWR4 uses scaffolding right from the beginning. I agree with Hartl here. If Hartl&rsquo;s tutorial had not explained everything that was going on under the hood before trying AWDWR4, I would have been really lost.</p>

<h4>Sending Mail and Internationalization</h4>

<p>AWDWR4 spends the additional time it gains by not focusing on testing and by using scaffolding on exploring additional features. AWDWR4 will walk you through send mail and internationalization. These were neat topics that will come in handy later.</p>

<h3>Conclusion</h3>

<p>After doing this myself, my advice to all Rails beginners out there would be to take the time to work through two different Rails tutorials. This exercise showed me that there are different ways of working with Rails and several ways to reach the same goal. This is extremely valuable for someone (me) who is starting out and may mistakenly believe that the Hartl way is the only correct way of writing Rails application.</p>

<p>I met someone at a meetup who recommended working through the Rails tutorial twice. I believe this would is helpful too since many of the chapters that were nebulous when first starting will be suddenly clear and make more sense on the second go. Nevertheless, I feel that working through the same book twice without exposure to other methods may delay the realization that there multiple ways of working with Rails.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lessons in Ruby from Exercism.io]]></title>
    <link href="http://codeandkaizen.herokuapp.com/blog/2014/02/05/lessons-in-ruby-from-exercism-dot-io/"/>
    <updated>2014-02-05T23:44:00+00:00</updated>
    <id>http://codeandkaizen.herokuapp.com/blog/2014/02/05/lessons-in-ruby-from-exercism-dot-io</id>
    <content type="html"><![CDATA[<h2>Exercism.io and Patience</h2>

<p>When I started my path of personal development I gathered a lot of information on online resources to improve my skills as a programmer. That&rsquo;s when I first learned about <a href="http://exercism.io/">Exercism.io.</a> It seemed like a popular and useful resource which would introduce feedback to my learning. I bookmarked and archived it; however, I didn&rsquo;t use it right away. I got more involved with the <a href="http://ruby.railstutorial.org/">Hartl Tutorial</a>, the <a href="http://pragprog.com/book/rails4/agile-web-development-with-rails-4">Agile Web Development with Rails 4</a> book, and a few more <a href="http://www.amazon.com/Design-Patterns-Ruby-Russ-Olsen/dp/0321490452">books</a>.</p>

<p>My interested got picked again at the <a href="http://nickelcityruby.com/">Nickel City Ruby</a> conference where I heard a few people raving about how great Exercism.io was. At first nothing interesting happened, I finished the first exercise and was ready to move on. After a couple of days of not getting any feedback simply advanced to the next exercise. This is how my first two exercises went: &ldquo;finish, wait, no response? Move on&rdquo;. At this point I was wondering what made Exercism.io so special (whatever it was I was not seeing it).</p>

<p>I finished the third exercise and forgot about it. A week had passed by the time I remembered I should check on my submission. I logged in and lo and behold&hellip; I had one feedback comment! It was a suggestion from a kind stranger on how my code could be improved. This suggestion was so good I was immediately excited. It did make my code better. I finally got it! You should Exercism.io a little time until someone gets around to checking your code.</p>

<p>The following exercises went much better. I waited patiently for some feedback which would eventually arrive and improve my code and teach me more about the Ruby language.</p>

<h2>My Lessons</h2>

<h3>Adding Elements to a Hash of Arrays</h3>

<p>In one of the problems I had to implement a class that could classify students based on their grades. The straight forward solution: a hash where the grade is the key and an array of students is the value. Here&rsquo;s the catch: when looking for the students in a grade with no students assigned I should return and empty array <code>[]</code> instead of <code>null</code>.</p>

<p>Here&rsquo;s my approach:</p>

<p>{% codeblock Passing Test lang:ruby %}<br/>
class School
  attr_reader :db</p>

<p>  def initialize</p>

<pre><code>@db = Hash.new([])
</code></pre>

<p>  end</p>

<p>  def add(name, grade)</p>

<pre><code>@db[grade].empty? ? @db[grade] = [name] : @db[grade] &lt;&lt; name
</code></pre>

<p>  end</p>

<p>  def grade(grade)</p>

<pre><code>@db[grade]
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>I believe this covered the requirements. <code>Hash.new([])</code> returns a new, empty hash; if this hash is subsequently accessed by a key that doesnâ€™t correspond to a hash entry, the single object <code>[]</code> will be used for all default values. So if <code>@db</code> is empty, then <code>@db[wibble]</code> will return <code>[]</code>. Looking good!</p>

<p>My biggest problem with my implementation was the add method. Even though it is written in one line (only because I am using ternary notation), it is not very readable. I wrote it that way because simply writing <code>@db[grade] &lt;&lt; name</code> did not work. Somebody suggested I use <code>@db[grade] += [name]</code>, but I didn&rsquo;t think it would work (more on this later). Why would that work when <code>@db[grade] &lt;&lt; name</code> did not?</p>

<p>Turns out using <code>@db[grade] += [name]</code> was definitely the way to go. I ran a few of tests and discovered why <code>@db[grade] &lt;&lt; [name]</code> was not working. I believe <code>@db[grade] += [name]</code> works as <code>@db[grade] = @db[grade] + [name]</code>. Since I had defined the default value of the <code>@db</code> hash to be <code>[]</code>, that expression gets interpreted as <code>@db[grade] = [] + [name]</code> which successfully performs the desired concatenation. This is pretty neat. I hadn&rsquo;t thought of this approach when I first coded this. I opted for the conditional because when I tried doing concatenation with <code>@db[grade] &lt;&lt; [name]</code> I ran into an interesting problem.</p>

<p>The interesting part was finding out why <code>@db[grade] &lt;&lt; [name]</code> was not working. This expression is essentially <code>@db[grade].push([name])</code>. This statement directly modifies the default value for the hash whenever <code>@db[grade]</code> has not been assigned a value. This was great find! It showed me difference between <code>+=</code> and <code>&lt;&lt;</code> as well how default values for a hash work.</p>

<p>My code looked like this in the end:</p>

<p>{% codeblock Passing Test lang:ruby %}
class School
  attr_reader :db</p>

<p>  def initialize</p>

<pre><code>@db = Hash.new([])
</code></pre>

<p>  end</p>

<p>  def add(name, grade)</p>

<pre><code>@db[grade] += [name]
</code></pre>

<p>  end</p>

<p>  def grade(grade)</p>

<pre><code>@db[grade]
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<h3>The Powerful Ruby Library</h3>

<p>The second problem I had with my code was the sort method for the same exercise. The sort method was supposed to return a hash with the grades and the names of the students in the grade sorted. I had implemented this method in the following way:</p>

<p>{% codeblock Passing Test lang:ruby %}<br/>
def sort
  sorted = {}
  @db.keys.sort.each { |key| sorted[key] = @db[key].sort }
  sorted
end
{% endcodeblock %}</p>

<p>This worked but it didn&rsquo;t seem right to me. Ruby is a very powerful language and I have seen pretty clever of ways of solving problems like this one. My solution seemed like a clunky way of doing things. Luckily someone suggested a different approach. This is the final version of the method. One line! Yey!</p>

<p>{% codeblock Passing Test lang:ruby %}<br/>
def sort
   Hash[@db.sort.map { |grade,name| [grade, name.sort] }]
end
{% endcodeblock %}</p>

<p>Let&rsquo;s break it down.</p>

<ul>
<li><code>Hash#sort</code> is a useful method which returns a hash table sorted by its keys.</li>
<li><code>Enumerable#map</code> is a method that returns a new array with the results of running a block once for every element in the enumerable. In this case I am passing my sorted hash table and getting back an array in which each element looks like this <code>[grade, [name1, name2, ..., nameN]]</code>. Each element is an Array of length = 2 where the first element is the grade and the second element is a sorted array of student names.</li>
<li>The <code>Hash[]</code> method returns a hash. In one of its many forms, this method accepts an array of pairs as an argument (i.e. <code>[[key1,value1], [key2, value2],...,[keyN, valueN]]</code>) and creates a hash table.</li>
</ul>


<p>Combining all this methods makes it possible to get the full functionality of the sort method implemented in one very readable line.</p>

<h3>Enumerable to the rescue</h3>

<p>I learned my third lesson in a different exercise. This exercise was very straightforward. Given two strings count the differences between them at every position. For example, CAT and CAP have a difference of 1. One condition of the problem was to stop the counting at the end of the shorter string. For instance, CATS and CAP have a difference of 1.  Simple enough. This was first attempt.</p>

<p>{% codeblock Passing Test lang:ruby %}<br/>
class Hamming
  def self.compute(base, test)</p>

<pre><code>hamming_diff = 0
[base.size,test.size].min.times do  |i| 
  hamming_diff += 1 if base[i] != test[i]
end
hamming_diff
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>This was effective. However, I was able to improve it by using the special features of the Enumerable class pointed out by another user. In Ruby, most methods that take block return an Enumerable if no block is given. Additionally, one can apply the <code>Enumerable#count</code> method which takes a block as a parameter to determine when to count an item.  Following these insights my final implementation looked like this.</p>

<p>{% codeblock Passing Test lang:ruby %}
class Hamming
  def self.compute(base, test)</p>

<pre><code>max_length_to_compare = [base.size,test.size].min
max_length_to_compare.times.count { |i| base[i] != test[i] } 
</code></pre>

<p>  end
end
{% endcodeblock %}</p>

<p>The compute method could have been expressed in one line; however, this way the method separates the two main &ldquo;ideas&rdquo; in the code: finding the maximum length for the comparison and the counting loop. I believe that separating the ideas makes it into a very readable implementation.</p>

<h2>Conclusion</h2>

<p><a href="http://exercism.io/">Exercism.io</a> is not meant for you to plough through all the exercises. It is meant for careful review, collaboration, and revision so that you can learn how to write the best code possible. The users in the site will be helpful but you just have to be a little patient and wait for their input.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hartl's Rails Tutorial - I'm Done!]]></title>
    <link href="http://codeandkaizen.herokuapp.com/blog/2013/12/24/hartls-rails-tutorial-im-done/"/>
    <updated>2013-12-24T06:02:00+00:00</updated>
    <id>http://codeandkaizen.herokuapp.com/blog/2013/12/24/hartls-rails-tutorial-im-done</id>
    <content type="html"><![CDATA[<p>So after a few months of coding on the weekend and late at night, I am finally done with the Hartl Rails tutorial. It was a great experience and I feel great about doing pretty much everything on the book. There was a lot to cover and I am not going to review it (there are plenty of reviews out there), but I am going to write about my biggest takeaways.</p>

<h2>The Ruby Koans</h2>

<p>This little jewel was hidden in the exercise section of chapter 4. This resource was excellent and should have been more prominent. Someone who skipped the ruby section exercises could miss this great resource.</p>

<h2>Rails covers everything</h2>

<p>Rails makes it possible for one person to do lots very fast. It is great, but sometimes it feels like &ldquo;magic&rdquo;. In order to really understand the magic you have to really understand rails (this is hard, there is a lot there).</p>

<h2>ActiveRecord is important</h2>

<p>ActiveRecord is the heart and soul of Rails. Understanding Object-Relational Mapping goes a long way.</p>

<h2>Gems can be addictive</h2>

<p>Gems are a great part of the Ruby community; however, they should be used sparingly. Putting too many gems in an application is like filling a system with a lot of black boxes you have no control over.</p>

<h2>TDD for the win!</h2>

<p>I love that this tutorial emphasizes TDD. I love testing and this book rarely writes a feature without a test. I am currently working through the <a href="http://pragprog.com/book/rails4/agile-web-development-with-rails-4">Agile Development with Rails 4</a> book and I do not like how little testing there is in that book. Hartl really knocks it out of the park here.</p>

<p>Those are my thoughts for now. I may update this entry later. However, I don&rsquo;t want to spend too much time on this. I have moved on to a different book: <a href="http://pragprog.com/book/rails4/agile-web-development-with-rails-4">Agile Development with Rails 4</a>. This is helping me internalize many of the concepts and see different ways to work with Rails. I feel that once I am done with this book I will have the Rails expertise to start playing with a few personal projects I have in mind. These are exciting times.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nitrous.io and How I Stopped Carrying Two Laptops]]></title>
    <link href="http://codeandkaizen.herokuapp.com/blog/2013/12/12/nitrous-dot-io-and-how-i-stopped-carrying-two-laptops/"/>
    <updated>2013-12-12T05:54:00+00:00</updated>
    <id>http://codeandkaizen.herokuapp.com/blog/2013/12/12/nitrous-dot-io-and-how-i-stopped-carrying-two-laptops</id>
    <content type="html"><![CDATA[<p>This post is bittersweet.</p>

<p>Not too long ago I wrote about how <a href="/blog/2013/10/06/my-ubuntu-laptop/">I breathed new life to my old college laptop</a> by turning it into my development/learning computer. When I was done, I was happy. I started using it all the time and even bringing with me when I traveled for work which meant carrying two laptops. I did not care though. My Ubuntu laptop was worth it!</p>

<p>This lasted about two months. A few weeks ago I attended a programming workshop at Full Stack Academy. We spent a few hours working through a few exercises in JavaScript and sharing our solutions. The workshop was good and the instructors were fun; however, they showed me one thing that changed my life. They introduced me to <a href="https://www.nitrous.io/">nitrous.io</a>. Nitrous.io is cloud based development environment with a web-based IDE and cloud VMs. What does this mean? You get a Linux box in your browser (Mind blown!). Maybe I am little late to the party but this literally changed my life. I do not carry two laptops when I travel for work anymore. I travel weekly so this is huge for me.</p>

<p>I recently transferred all my projects to nitrous.io (this blog too!) and life has been much easier that way (Sweet!).</p>

<p>My old laptop is still awesome but I don&rsquo;t use it that much and is back to collecting dust (Bitter!).</p>

<p>Anyway&hellip; cloud based IDEs are the <strong>future</strong>! In fact a quick google search just confirmed that you can use the <a href="http://www.raspberrypi.org/phpBB3/viewtopic.php?t=9984">Raspberry Pi</a> and <a href="https://c9.io/">Cloud9</a> &ndash; another popular web based IDE &ndash; to get a development environment for $35. This is extremely exciting.</p>

<p>That is all for now.</p>
]]></content>
  </entry>
  
</feed>
