<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: web dev | Code and Kaizen]]></title>
  <link href="http://codeandkaizen.herokuapp.com/blog/categories/web-dev/atom.xml" rel="self"/>
  <link href="http://codeandkaizen.herokuapp.com/"/>
  <updated>2013-12-27T15:31:31+00:00</updated>
  <id>http://codeandkaizen.herokuapp.com/</id>
  <author>
    <name><![CDATA[Rafael Huaman]]></name>
    <email><![CDATA[info@codeandkaizen.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hartl's Rails Tutorial - I'm Done!]]></title>
    <link href="http://codeandkaizen.herokuapp.com/blog/2013/12/24/hartls-rails-tutorial-im-done/"/>
    <updated>2013-12-24T06:02:00+00:00</updated>
    <id>http://codeandkaizen.herokuapp.com/blog/2013/12/24/hartls-rails-tutorial-im-done</id>
    <content type="html"><![CDATA[<p>So after a few months of coding on the weekend and late at night, I am finally done with the Hartl Rails tutorial. It was a great experience and I feel great about doing pretty much everything on the book. There was a lot to cover and I am not going to review it (there are plenty of reviews out there), but I am going to write about my biggest takeaways.</p>

<h2>The Ruby Koans</h2>

<p>This little jewel was hidden in the exercise section of chapter 4. This resource was excellent and should have been more prominent. Someone who skipped the ruby section exercises could miss this great resource.</p>

<h2>Rails covers everything</h2>

<p>Rails makes it possible for one person to do lots very fast. It is great, but sometimes it feels like &ldquo;magic&rdquo;. In order to really understand the magic you have to really understand rails (this is hard, there is a lot there).</p>

<h2>ActiveRecord is important</h2>

<p>ActiveRecord is the heart and soul of Rails. Understanding Object-Relational Mapping goes a long way.</p>

<h2>Gems can be addictive</h2>

<p>Gems are a great part of the Ruby community; however, they should be used sparingly. Putting too many gems in an application is like filling a system with a lot of black boxes you have no control over.</p>

<h2>TDD for the win!</h2>

<p>I love that this tutorial emphasizes TDD. I love testing and this book rarely writes a feature without a test. I am currently working through the <a href="http://pragprog.com/book/rails4/agile-web-development-with-rails-4">Agile Development with Rails 4</a> book and I do not like how little testing there is in that book. Hartl really knocks it out of the park here.</p>

<p>Those are my thoughts for now. I may update this entry later. However, I don&rsquo;t want to spend too much time on this. I have moved on to a different book: <a href="http://pragprog.com/book/rails4/agile-web-development-with-rails-4">Agile Development with Rails 4</a>. This is helping me internalize many of the concepts and see different ways to work with Rails. I feel that once I am done with this book I will have the Rails expertise to start playing with a few personal projects I have in mind. These are exciting times.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nitrous.io and How I Stopped Carrying Two Laptops]]></title>
    <link href="http://codeandkaizen.herokuapp.com/blog/2013/12/12/nitrous-dot-io-and-how-i-stopped-carrying-two-laptops/"/>
    <updated>2013-12-12T05:54:00+00:00</updated>
    <id>http://codeandkaizen.herokuapp.com/blog/2013/12/12/nitrous-dot-io-and-how-i-stopped-carrying-two-laptops</id>
    <content type="html"><![CDATA[<p>This post is bittersweet.</p>

<p>Not too long ago I wrote about how <a href="/blog/2013/10/06/my-ubuntu-laptop/">I breathed new life to my old college laptop</a> by turning it into my development/learning computer. When I was done, I was happy. I started using it all the time and even bringing with me when I traveled for work which meant carrying two laptops. I did not care though. My Ubuntu laptop was worth it!</p>

<p>This lasted about two months. A few weeks ago I attended a programming workshop at Full Stack Academy. We spent a few hours working through a few exercises in JavaScript and sharing our solutions. The workshop was good and the instructors were fun; however, they showed me one thing that changed my life. They introduced me to <a href="https://www.nitrous.io/">nitrous.io</a>. Nitrous.io is cloud based development environment with a web-based IDE and cloud VMs. What does this mean? You get a Linux box in your browser (Mind blown!). Maybe I am little late to the party but this literally changed my life. I do not carry two laptops when I travel for work anymore. I travel weekly so this is huge for me.</p>

<p>I recently transferred all my projects to nitrous.io (this blog too!) and life has been much easier that way (Sweet!).</p>

<p>My old laptop is still awesome but I don&rsquo;t use it that much and is back to collecting dust (Bitter!).</p>

<p>Anyway&hellip; cloud based IDEs are the <strong>future</strong>! In fact a quick google search just confirmed that you can use the <a href="http://www.raspberrypi.org/phpBB3/viewtopic.php?t=9984">Raspberry Pi</a> and <a href="https://c9.io/">Cloud9</a> &ndash; another popular web based IDE &ndash; to get a development environment for $35. This is extremely exciting.</p>

<p>That is all for now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Code Retreat]]></title>
    <link href="http://codeandkaizen.herokuapp.com/blog/2013/11/28/my-first-code-retreat/"/>
    <updated>2013-11-28T05:44:00+00:00</updated>
    <id>http://codeandkaizen.herokuapp.com/blog/2013/11/28/my-first-code-retreat</id>
    <content type="html"><![CDATA[<p>This is a post about my <a href="http://coderetreat.org/">code retreat</a> experience a few months ago. For those who don&rsquo;t know what a Code Retreat is please visit <a href="http://coderetreat.org/">coderetreat.org</a>.</p>

<p>This is not going be extensive. I don&rsquo;t want to go into the details and the specific exercises because that would be like spoilers. I am just going to focus on the new things I learned/tried that day and my overall conclusion.</p>

<h2>Pair Programming</h2>

<p>To those that have never tried it, a code retreat is a great way to pair program for the first time. The first time I paired was during a job interview. When I told some people this, I got some raised eyebrows and some &ldquo;Yikes! I bet that was intimidating&rdquo;. It didn&rsquo;t think so at the time but afterwards while analyzing my performance I concluded that my interactions were little awkward. I could have used some practice&hellip; well this retreat was just what I needed. In a single day I paired over and over again. I paired with both industry veterans and beginners and I learned a lot with each one. The best part is that everyone was always friendly and fun willing to teach and be open to criticism.</p>

<p>I even found myself in a situation where my partner was flying through code and he got stuck and couldn&rsquo;t find the problem. He didn&rsquo;t quite stop though and was flying through tests and switching screens between the Ruby documentation and our program. I had to found a way to put the brakes on his speed and slowly take a few steps back to where I thought the bug was. I was abrupt but polite, all the time hoping he wouldn&rsquo;t take it the wrong way. In the end he thanked me for it! It those little learning moments that make code retreats a valuable experience</p>

<h2>Retrospectives</h2>

<p>Actually looking back at what we did at every step of the way. This was neat; it really drove the point of Agile and refactoring home. We shouldn&rsquo;t just refactor code but also try to improve ourselves and our practices.</p>

<h2>VIM</h2>

<p>Most people at the retreat were fine with using Sublime and this was working fine until one of pairs said &ldquo;Have you ever used VIM? You will learn today.&rdquo; How can you say no to a free VIM lightning class? It was definitely a challenge at first but I got the basics down easy enough. I can see how with practice and a few neat features productivity can increase dramatically. I have not converted completely but ever since the retreat I have been practicing with vimtutor whenever I have a few free minutes. I will switch completely once I feel I am not super slow (especially now that I am using nitrous.io &mdash; more to come on this).</p>

<h2>Flexing coding muscles</h2>

<p>Those exercises really make you think. The exercises are designed to teach and they are good at that. Every exercise makes you think hard and a lot and in different ways too. Simple constraints like telling you not to use a particular statement can really help you explore the limits of a programming paradigm or the features of a particular programming language. By end of the day you will be tired and you will feel great!</p>

<h2>Programming Styles</h2>

<p>This comes with pairing. I had seen other people&rsquo;s code before at school, but they all had a style similar to mine. I guess this is expected since my classmates and I learned together.  But pairing with people who think differently is just eye-opening. Seeing different styles helped me learn new things about the Ruby programming language and showed me different ways to address problems. I had several &ldquo;wow&rdquo; moments when my partners suggested quick and simple solutions that I had not thought about before.</p>

<h2>Fun</h2>

<p>It was all fun. What can I say? I love coding and a full day of challenges with great people was excellent.</p>

<h1>Conclusion</h1>

<p>I recommend it to everybody. Programmers need practice too and retreats are an excellent way to do it and discover many things in the process.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Updating My Learing Plan]]></title>
    <link href="http://codeandkaizen.herokuapp.com/blog/2013/10/13/updating-my-learing-plan/"/>
    <updated>2013-10-13T15:05:00+00:00</updated>
    <id>http://codeandkaizen.herokuapp.com/blog/2013/10/13/updating-my-learing-plan</id>
    <content type="html"><![CDATA[<p>When I started this learning process, I had a goal in mind and built a plan to help me achieve it. A plan can help you think methodically about how to achieve your goal and keep track of your progress. The learning plan I designed was based on what I knew at the time. Since then I have reached many milestones and have learned a lot from others. It is time now to revisit this plan and see if it is still relevant.</p>

<h2>Step one: Check Progress</h2>

<ul>
<li>Basic programming concepts (Done &ndash; Head First Java for quick references)</li>
<li>The Ruby programming language

<ul>
<li>Basics syntax and concepts (Done &ndash; codecademy and Ruby Koans)</li>
</ul>
</li>
<li>Rails, the framework to develop web application with Ruby

<ul>
<li>Chapter 8 of Michael Hartl&rsquo;s tutorial</li>
</ul>
</li>
<li>Libraries / Ruby Gems

<ul>
<li>Revaluated</li>
</ul>
</li>
<li>Rspec, Test Driven Development (TDD) or Behavior Driven Development (BDD) methodologies

<ul>
<li>I participated in a code retreat and had the chance to try out testing and rspec through different exercises.</li>
</ul>
</li>
<li>HTML and CSS, I will try HAML and Sass

<ul>
<li>Finished foundational HTML and CSS. I have used Sass briefly through Hartl&rsquo;s tutorial</li>
<li>Have not tried HAML</li>
</ul>
</li>
<li>JavaScript and jQuery

<ul>
<li>Not addressed</li>
</ul>
</li>
<li>Database Concepts

<ul>
<li>Basics Covered</li>
</ul>
</li>
<li>Web basics &ndash; forms, HTTP request / response

<ul>
<li>Covered partially by Michael Hartl&rsquo;s tutorial</li>
</ul>
</li>
<li>UNIX command line and development environment (Done &ndash; currently working with Ubuntu)</li>
<li>Deployment and Server Management

<ul>
<li>Heroku (Done &ndash; I use Heroku to host this blog and I am using it in Michael Hartl&rsquo;s tutorial)</li>
</ul>
</li>
<li>Git and Github, Source code version control systems

<ul>
<li>Basics (Done &ndash; Michael Hartl&rsquo;s tutorial)</li>
<li>Creating a repository</li>
<li>Adding changes and committing them</li>
<li>Branching and simple merging</li>
<li>Pull requests (Added some simple changes to the theme I use for my blog)</li>
</ul>
</li>
<li>Object Oriented Programming (OOP) concepts

<ul>
<li>Reviewed inheritance, encapsulationa, and polymorphism</li>
</ul>
</li>
</ul>


<h2>Step Two: Evaluate and Redesign Plan</h2>

<p>I covered a lot of ground and I learned a lot in the process. During the past few months I have met a lot of people who have helped in one way or another. I had the chance to have short conversation with <a href="https://twitter.com/blainsmith">Blain Smith</a> from <a href="http://www.madglory.com/">Mad Glory</a>. He single handedly turned my plan upside down and was the main inspiration for this post. He told me about the importance of being framework agnostic and the benefits of focusing on learning the techniques of a software craftsman instead of just becoming adept with different technologies.</p>

<p>If you look at my initial plan, I had specially focused on learning how to use different technologies: rspec, git, Ruby, Rails, etc. I had placed a lot of importance on becoming an expert with all of these technologies. What Blain helped me realize is that while knowing how to use the tools is important, learning the techniques of a Software Craftsman what really sets one apart. The techniques he was referring to are the more abstract concepts and knowledge that a good developer should have. He was referring to techniques such as design patterns, test driven development, object oriented solutions, agile methodologies, and following best programming practices in order to write good code.</p>

<p>With this in mind I have come up with an updated version of the plan with a different set of priorities. After a little extra research I identified some resources that would help me with this revised plan.</p>

<ul>
<li>Design Patterns and Object Oriented Design

<ul>
<li><a href="http://www.amazon.com/Design-Patterns-Ruby-Russ-Olsen/dp/0321490452">Design Patterns in Ruby</a>

<ul>
<li> This will help me learn design patterns while at the same time polishing ruby skills</li>
</ul>
</li>
<li><a href="http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612/ref=tmm_hrd_title_0">Design Patterns: Elements of Reusable Object-Oriented Software</a></li>
</ul>
</li>
<li>Writing good code

<ul>
<li><a href="http://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670">Code Complete</a></li>
<li><a href="http://www.amazon.com/The-Pragmatic-Programmer-Journeyman-Master/dp/020161622X">The Pragmatic Programmer</a></li>
</ul>
</li>
<li>Testing

<ul>
<li>Practice Test driven development through small projects and exercises.</li>
</ul>
</li>
<li>Ruby &ndash; Next steps
  &ndash;* Metaprogramming</li>
<li>Techniques for Web Design

<ul>
<li>Practice web design concepts and techniques and learn more HTML and CSS (HAML and Sass) through it</li>
</ul>
</li>
</ul>


<p>So this is my new approach. Moving forward I will emphasize techniques and methodlogies instead of specific technologies. From now on the way I will learn a new language or framework is through the exploration of a new programming concept. For example, I will focus on Ruby while learning design patterns and I try Javascript when practicing web design.</p>

<h3>Learning tip</h3>

<p>In the past few months I found that the learning plan I created was very helpful. It will keep you on track and show your progress.
As a beginner it is very possible that your first learning plan will not be the best. This is why it&rsquo;s important to keep your plan flexible and continue to reevaluate it as you learn more about the topics you are exploring.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby and the Koans]]></title>
    <link href="http://codeandkaizen.herokuapp.com/blog/2013/09/19/ruby-and-the-koans/"/>
    <updated>2013-09-19T23:26:00+00:00</updated>
    <id>http://codeandkaizen.herokuapp.com/blog/2013/09/19/ruby-and-the-koans</id>
    <content type="html"><![CDATA[<p>After finishing Codecademy&rsquo;s Web Fundamentals track I immediately started the Ruby track. I knew I wanted to go with Ruby because I had already done plenty of research on the technologies I needed to learn in order to become a web developer. I had used Ruby in the past for a very simple Ride Sharing web application I built while at school; however, I used it simply as a means to work with rails and setup the application quickly. During my student time this was OK; however, now that I have made a serious choice about becoming a web developer I need to master it.
The authors of the book <a href ="http://www.amazon.com/Apprenticeship-Patterns-Guidance-Aspiring-Craftsman/dp/0596518382/ref=sr_1_1?s=books&ie=UTF8&qid=1379649530&sr=1-1">Apprenticeship Patterns</a> point out that &ldquo;It is important that you carefully weigh the options (between programming languages), as this is the foundation upon which your early career will be built&rdquo;. I have chosen Ruby. I will immerse myself in it, play with it in my free time, solve puzzles and read the documentation until I know it all. It will be a long road but I am ready to take the first steps.
The Ruby track offered by <a href="http://www.codecademy.com/">Codecademy</a> was very good. It was very simple and easy to understand. It even had a few &ldquo;projects&rdquo; to apply the concepts learned. The sections build on each other and it is easy to go back and review previous concepts and exercises in case you forget something along the way. The Ruby track can be finished very quickly since it just a beginner&rsquo;s course.<br/>
My conclusion after CodeAcademy&rsquo;s Ruby Track:</p>

<ul>
<li>This is definitely a beginner's course.</li>
<li>After I was done I felt that even though I could write classes, methods, procs, lambdas, and loops, there was still a lot to learn.</li> 
</ul>


<p>My initial thoughts on Ruby:</p>

<ul>
<li>I like it.</li> 
<li>It offers a lot of flexibility (There's usually more than one way to do one thing in Ruby)</li>
<li>Ruby offers a few interesting methods and features like "each", the flexible way to write conditions, and passing blocks.</li>
<li>It's very easy to work with hashes.</li>
</ul>




<h2>Achieving Zen with the Ruby Koans </h2>


<p>&ldquo;If a test runs in the forest, and no one is there to see it. Does it pass?&rdquo;</p>

<p>OK that&rsquo;s enough for my attempts at programming/Zen puns.</p>

<p>After I finished CodeAcademy&rsquo;s Ruby track I felt that there was a lot more I needed to learn about the language. The CodeAcademy tutorial is definitely a beginner&rsquo;s guide. It&rsquo;s meant to get you started, and walk you through the concepts but it does not go deeper. It doesn&rsquo;t even walk the users through installing Ruby in their machines.</p>

<p>This bothered me a lot. I felt that had I learned all the Ruby basics but I couldn&rsquo;t do much with them yet. I continued to feel this way until I reached the end of chapter 4 in <a href="http://ruby.railstutorial.org/">Michel Hartl&rsquo;s Rails tutorial</a>  (I will discuss my adventures with rails later). Hidden in the exercise section at the end of chapter four I found the best resource to help me learn ruby to date: <a href="http://rubykoans.com/">The Ruby Koans</a>.</p>

<p>The Ruby Koans brought to you by the nice folks at <a href="http://www.neo.com/">Neo Innovation</a> are a way to learn Ruby through testing. The Koans are structured as a series of exercises. Each exercise includes one or more tests the user needs to make pass. Each time the user runs the Koans, the program shows the first failed test in the terminal. The user then has to find the file and the specific test that is failing in order to fix it.</p>

<p>The user is not testing a big program in these exercises. The user is testing Ruby! Here is an example of a test in the Koans:</p>

<p>This test fails and the user has to fill replace &ldquo;__&rdquo; with the expected output</p>

<p>{% codeblock Failing Test lang:ruby %}
def test_creating_arrays
  empty_array = Array.new
  assert_equal <strong>, empty_array.class
  assert_equal </strong>, empty_array.size
end
{% endcodeblock %}</p>

<p>These changes will make the tests pass:</p>

<p>{% codeblock Passing Test lang:ruby %}<br/>
def test_creating_arrays
  empty_array = Array.new
  assert_equal Array, empty_array.class
  assert_equal 0, empty_array.size
end
{% endcodeblock %}</p>

<p>There are basically no hints or answer sheets (you can find solved Koans in <a href="https://github.com/">Github</a>, but why ruin these amazing exercises? This way the user is forced to think about the exercises and internalize the concepts with each test.</p>

<p>Another reason I liked the Koans is that they emphasize testing. As you advance you will find small projects and bigger exercises to work one that involve more coding than just replacing words in the text. I got so used to testing by this point that I used <a href="http://en.wikipedia.org/wiki/Test-driven_development">TDD</a> in the projects and even in the <a href="http://en.wikipedia.org/wiki/Farkle">Farkle</a> game at the end.</p>

<p>After finishing the Koans I definitely felt more adept in Ruby and was more confident in my abilities. I would recommend this style of learning to anyone that wants to learn Ruby.</p>
]]></content>
  </entry>
  
</feed>
