<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: web dev | Code and Kaizen]]></title>
  <link href="http://codeandkaizen.herokuapp.com/blog/categories/web-dev/atom.xml" rel="self"/>
  <link href="http://codeandkaizen.herokuapp.com/"/>
  <updated>2013-09-28T08:48:29-04:00</updated>
  <id>http://codeandkaizen.herokuapp.com/</id>
  <author>
    <name><![CDATA[Rafael Huaman]]></name>
    <email><![CDATA[info@codeandkaizen.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby and the Koans]]></title>
    <link href="http://codeandkaizen.herokuapp.com/blog/2013/09/19/ruby-and-the-koans/"/>
    <updated>2013-09-19T23:26:00-04:00</updated>
    <id>http://codeandkaizen.herokuapp.com/blog/2013/09/19/ruby-and-the-koans</id>
    <content type="html"><![CDATA[<p>After finishing Codecademy&rsquo;s Web Fundamentals track I immediately started the Ruby track. I knew I wanted to go with Ruby because I had already done plenty of research on the technologies I needed to learn in order to become a web developer. I had used Ruby in the past for a very simple Ride Sharing web application I built while at school; however, I used it simply as a means to work with rails and setup the application quickly. During my student time this was OK; however, now that I have made a serious choice about becoming a web developer I need to master it.
The authors of the book <a href ="http://www.amazon.com/Apprenticeship-Patterns-Guidance-Aspiring-Craftsman/dp/0596518382/ref=sr_1_1?s=books&ie=UTF8&qid=1379649530&sr=1-1">Apprenticeship Patterns</a> point out that &ldquo;It is important that you carefully weigh the options (between programming languages), as this is the foundation upon which your early career will be built&rdquo;. I have chosen Ruby. I will immerse myself in it, play with it in my free time, solve puzzles and read the documentation until I know it all. It will be a long road but I am ready to take the first steps.
The Ruby track offered by <a href="http://www.codecademy.com/">Codecademy</a> was very good. It was very simple and easy to understand. It even had a few &ldquo;projects&rdquo; to apply the concepts learned. The sections build on each other and it is easy to go back and review previous concepts and exercises in case you forget something along the way. The Ruby track can be finished very quickly since it just a beginner&rsquo;s course.<br/>
My conclusion after CodeAcademy&rsquo;s Ruby Track:</p>

<ul>
<li>This is definitely a beginner's course.</li>
<li>After I was done I felt that even though I could write classes, methods, procs, lambdas, and loops, there was still a lot to learn.</li> 
</ul>


<p>My initial thoughts on Ruby:</p>

<ul>
<li>I like it.</li> 
<li>It offers a lot of flexibility (There's usually more than one way to do one thing in Ruby)</li>
<li>Ruby offers a few interesting methods and features like "each", the flexible way to write conditions, and passing blocks.</li>
<li>It's very easy to work with hashes.</li>
</ul>




<h2>Achieving Zen with the Ruby Koans </h2>


<p>&ldquo;If a test runs in the forest, and no one is there to see it. Does it pass?&rdquo;</p>

<p>OK that&rsquo;s enough for my attempts at programming/Zen puns.</p>

<p>After I finished CodeAcademy&rsquo;s Ruby track I felt that there was a lot more I needed to learn about the language. The CodeAcademy tutorial is definitely a beginner&rsquo;s guide. It&rsquo;s meant to get you started, and walk you through the concepts but it does not go deeper. It doesn&rsquo;t even walk the users through installing Ruby in their machines.</p>

<p>This bothered me a lot. I felt that had I learned all the Ruby basics but I couldn&rsquo;t do much with them yet. I continued to feel this way until I reached the end of chapter 4 in <a href="http://ruby.railstutorial.org/">Michel Hartl&rsquo;s Rails tutorial</a>  (I will discuss my adventures with rails later). Hidden in the exercise section at the end of chapter four I found the best resource to help me learn ruby to date: <a href="http://rubykoans.com/">The Ruby Koans</a>.</p>

<p>The Ruby Koans brought to you by the nice folks at <a href="http://www.neo.com/">Neo Innovation</a> are a way to learn Ruby through testing. The Koans are structured as a series of exercises. Each exercise includes one or more tests the user needs to make pass. Each time the user runs the Koans, the program shows the first failed test in the terminal. The user then has to find the file and the specific test that is failing in order to fix it.</p>

<p>The user is not testing a big program in these exercises. The user is testing Ruby! Here is an example of a test in the Koans:</p>

<p>This test fails and the user has to fill replace &ldquo;__&rdquo; with the expected output</p>

<p>{% codeblock Failing Test lang:ruby %}
def test_creating_arrays
  empty_array = Array.new
  assert_equal <strong>, empty_array.class
  assert_equal </strong>, empty_array.size
end
{% endcodeblock %}</p>

<p>These changes will make the tests pass:</p>

<p>{% codeblock Passing Test lang:ruby %}<br/>
def test_creating_arrays
  empty_array = Array.new
  assert_equal Array, empty_array.class
  assert_equal 0, empty_array.size
end
{% endcodeblock %}</p>

<p>There are basically no hints or answer sheets (you can find solved Koans in <a href="https://github.com/">Github</a>, but why ruin these amazing exercises? This way the user is forced to think about the exercises and internalize the concepts with each test.</p>

<p>Another reason I liked the Koans is that they emphasize testing. As you advance you will find small projects and bigger exercises to work one that involve more coding than just replacing words in the text. I got so used to testing by this point that I used <a href="http://en.wikipedia.org/wiki/Test-driven_development">TDD</a> in the projects and even in the <a href="http://en.wikipedia.org/wiki/Farkle">Farkle</a> game at the end.</p>

<p>After finishing the Koans I definitely felt more adept in Ruby and was more confident in my abilities. I would recommend this style of learning to anyone that wants to learn Ruby.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git and Github]]></title>
    <link href="http://codeandkaizen.herokuapp.com/blog/2013/09/19/git-and-github/"/>
    <updated>2013-09-19T23:25:00-04:00</updated>
    <id>http://codeandkaizen.herokuapp.com/blog/2013/09/19/git-and-github</id>
    <content type="html"><![CDATA[<p>This is pretty straight forward. I had setup a <a href="https://github.com/">Github</a> account in the past. But I had rarely used it. I used the free <a href=” the http://try.github.io/levels/1/challenges/1”>Try git tutorial</a> from <a href=” http://www.codeschool.com/”>Code School</a> to help me started. I started using git with <a href="http://octopress.org/">Octopress</a> and with <a href="http://ruby.railstutorial.org/">Michael Hartl&rsquo;s Rails tutorial</a>.
I have started using git to version all of the code I am writing. Additionally, I have been uploading all the code I have completed from tutorials to Github.
The interesting thing about uploading code to Github is that it forced me to <a href="http://en.wikipedia.org/wiki/Code_refactoring">refactor</a> and make my code nicer. The thought that my code was out there for everyone to see, made me push myself to make it better!
I have used only few of the features Git and Github have to offer. I use it for code versioning mostly.Additionally, <a href="http://git-scm.com/book/en/Git-Branching">branching</a> is a useful feature that I have started to understand. With some discipline and practice I will introduce branching to my everyday coding. However, this is only the tip of the iceberg in terms of Git. Anyone interested in learning more should check out <a href=http://git-scm.com/book> the Pro Git book</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTML, CSS, and Codecademy]]></title>
    <link href="http://codeandkaizen.herokuapp.com/blog/2013/09/09/html/"/>
    <updated>2013-09-09T22:39:00-04:00</updated>
    <id>http://codeandkaizen.herokuapp.com/blog/2013/09/09/html</id>
    <content type="html"><![CDATA[<p>OK so this one is a bit interesting. After playing around with Java, I decided I needed to have a really good grasp of the web fundamentals. So the next step would be HTML and CSS.</p>

<p>I had learned a bit about HTML and CSS before, but I hadn&rsquo;t really dived deep into the subject. After a few Google searches and reading a few reviews I decided to get the book HTML and &amp; CSS Design and build websites by Jon Duckett. This book was great!. Short and concise explanations paired with excellent visual design and great photographs. The book was just so pretty it was a joy to read and to hold. The book has a companion website which you can use to get the source code and images for the examples. Besides core HTML and CSS concepts, the book covers best practices, backwards and cross-browser compatibility. I recommend this book to anyone who wants to learn about HTML and CSS and get acquainted with some design concepts.</p>

<p>I was about all done with the HTML part of the book when I stumbled upon Codecademy. An enlightened internet user mentioned it on Quora and I decided to take a look out of curiosity. What a great find! You really have to give credit to the programming community for building such amazing learning resources and making them available to the public for free. Codecademy offers free coding courses through their interactive online platform, which allows its users to code right on the browser and see immediate results without any previous setup. CodeSchool and Treehouse offer paid versions of this web service. At around $25 a month, access to these websites is a bargain, they offer as similar platforms for learning paired with videos and a lot more courses to choose from. Codecademy does not have as much content as its paid counterparts but it&rsquo;s free!</p>

<p>Codecademy was just what I needed. Reading the books and following along some of the work was great but I needed additional exercises. Codecademy helped me with this. And I was quickly done with their &ldquo;Web Fundamentals&rdquo; track which included HTML and CSS. Codecademy had effectively replaced my book even though it wasn&rsquo;t as detailed. I imagine that the great people at Codecademy will add more advanced courses with time.</p>

<p>After finishing the HTML and CSS course I felt good about what I had learned. Let&rsquo;s be honest, I won&rsquo;t be able to memorize all the tags and syntax unless I use them repeatedly. But there are plenty of resources out there I can use to check for syntax rules when the time comes. I already use HTML while editing these blog posts, but CSS will be a bit harder to use on a regular basis.</p>

<p>At this point I wanted to move forward so I did. I was done with HTML &amp; CSS and Codecademy offered several tracks so I quickly moved onto Ruby.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Java Refresher]]></title>
    <link href="http://codeandkaizen.herokuapp.com/blog/2013/08/20/a-java-refresher/"/>
    <updated>2013-08-20T13:56:00-04:00</updated>
    <id>http://codeandkaizen.herokuapp.com/blog/2013/08/20/a-java-refresher</id>
    <content type="html"><![CDATA[<p>The first thing I decided to do was to refresh my knowledge of Java and object oriented programming in general. This is probably not the best option for a total beginner. Most of the resources out there that teach Web Dev skills start easy with HTML &amp; CSS as well as web fundamentals. These are great for people who have just started to learn how to code. I am not a beginner though. I am well versed in a lot of technical concepts and I have already been programming for a few years. I just needed to get back in the right mindset. Exploring something familiar would help me do that quickly. So Java it was!</p>

<p>I grabbed a copy of <a href="http://www.amazon.com/Head-First-Java-2nd-Edition/dp/0596009208">Head first: Java</a> and started to quickly going through all the concepts. I became very familiar with Java during my college years. But I have been out of practice for a while. Saying that I was a little rusty would be generous. After some reading I started to remember the concepts faster and faster.
The book was very unique. It tries to keep you interested by not being a conventional &ldquo;boring&rdquo; book, so it throws pictures at you and keeps you &ldquo;off balance&rdquo; by not following a conventional form. In short, I liked it and if I ever need to reference some Java concepts again I would probably pick it up one more time.</p>

<p>I did not read the whole book. I did not focus on syntax but I did pay a lot of attention to the sections that involved Object Oriented Programming concepts and good practices. I also went to <a href="http://codingbat.com/">CodingBat.com</a> to practice some basic concepts like recursion and solve some puzzles. This was good enough for me and I decided I was ready to move on.
I thought about starting a bigger project like a simple Android App as a way to practice some more. This was very tempting. The idea of building an App sounded very appealing and fun. Nevertheless, I decided to remain focused and stick to roadmap and topics I laid out.</p>

<p>Next: HTML and CSS</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Roadmap to the Full Stack]]></title>
    <link href="http://codeandkaizen.herokuapp.com/blog/2013/08/15/roadmap-to-the-full-stack/"/>
    <updated>2013-08-15T17:25:00-04:00</updated>
    <id>http://codeandkaizen.herokuapp.com/blog/2013/08/15/roadmap-to-the-full-stack</id>
    <content type="html"><![CDATA[<p>After some research I have narrowed down the list of technologies and topics that a junior web developer should know. To put this list together I researched the technologies that the leading web development shops are using, the curricula offered at several popular Web Dev. workshops, and different posts on the web with advice related to this subject.  I am very familiar with several of these concepts; however, I plan spend some time on all of them, I want to be thorough.</p>

<h2>The Stack</h2>


<ul>
<li>Basic programming concepts</li>
<li>the Ruby programming language</li>
<li>Rails, the framework to develop web application with Ruby</li>
<li>Libraries / Ruby Gems</li>
<li>Rspec, Test Driven Development (TDD) or Behavior Driven Development (BDD) methodologies </li>
<li>HTML and CSS, I will try HAML and Sass </li>
<li>JavaScript and jQuery</li>
<li>Database Concepts</li>
<li>Web basics - forms, HTTP request / response </li>
<li>UNIX command line and development environment</li>
<li>Deployment and Server Management</li>
<li>Git and Github, Source code version control systems</li>
<li>Object Oriented Programming (OOP) concepts</li>
</ul>




<h2>My resources</h2>


<ul>
<li><a href="http://www.codecademy.com/">Codecademy</a></li>
<li><a href="http://hackercs.com/">Hackcer CS</a></li>
<li><a href="http://codingbat.com/">CodingBat</li>
<li><a href="https://www.codeschool.com/">Code School</li>
<li><a href="http://teamtreehouse.com/">Treehouse</li>
<li><a href="http://exercism.io/">exercism.io</li>
<li><a href="http://www.pairprogramwith.me/">Pair Program with Me</li>
<li><a href="http://www.meetup.com/hackerhours/">Hacker Hours Meetup</li>
<li><a href="http://www.codetriage.com/">Code Triage</li>
<li><a href="http://prework.flatironschool.com/">Flatiron School</li>
</ul>



]]></content>
  </entry>
  
</feed>
